

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (30 October 2023 16:40:01) as /Users/fran/Downloads/macos64/CuisUniversity-5981.image!


----End fileIn of /Users/fran/Documents/Facultad/Inge1/Ingenieria-de-Software-I/08-MarsRover-ElRegreso/MarsRover-WithHeading.st----!

!testRun: #MarsRoverLoggerTest #test01LogIsEmptyString stamp: 'FK 10/30/2023 16:40:30'!
PASSED!

!testRun: #MarsRoverLoggerTest #test02LogWithPositionHasOneLineMovingNorth stamp: 'FK 10/30/2023 16:40:30'!
PASSED!

!testRun: #MarsRoverLoggerTest #test03LogWithPositionHasOneLineMovingSouth stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverLoggerTest #test04LogWithPositionHasOneLineMovingWest stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverLoggerTest #test05LogWithPositionHasOneLineMovingEast stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverLoggerTest #test06LogWithPositionHasTwoLinesMovingFF stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverLoggerTest #test07LogWithHeadingsHasOneLineRotatingWest stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverLoggerTest #test08LogWithHeadingsHasOneLineRotatingEast stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverLoggerTest #test09LogWithHeadingsHasOneLineRotatingNorth stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverLoggerTest #test10LogWithHeadingsHasOneLineRotatingSouth stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverLoggerTest #test11LogWithHeadingsHasTwoLinesRotatingRL stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverLoggerTest #test12InitializeLoggerForPositionOnly stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverLoggerTest #test13InitializeLoggerForHeadingOnly stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverLoggerTest #test14InitializeLoggerForPositionAndHeading stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverWindowTest #test01WindowForPositionOnly stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverWindowTest #test02WindowForPositionOnlyMoveFF stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverWindowTest #test03WindowForHeadingOnly stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverWindowTest #test04WindowForHeadingOnlyRotateRR stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverWindowTest #test05WindowForPositionAndHeading stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

!testRun: #MarsRoverWindowTest #test06WindowForPositionAndHeadingAfterRF stamp: 'FK 10/30/2023 16:40:31'!
PASSED!

----STARTUP---- (30 October 2023 18:01:52) as /Users/fran/Downloads/macos64/CuisUniversity-5981.image!


Object subclass: #Cart
	instanceVariableNames: 'clientId password cartElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FK 10/30/2023 19:27:53'!
Object subclass: #Cart
	instanceVariableNames: 'clientId password cartElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FK 10/30/2023 19:28:17'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'nil' stamp: 'FK 10/30/2023 19:31:47'!
test01CreateCartWithValidParameters
	| cart clientId  password |
	password := 'contrasenia'.
	clientId := 1234567.
	cart := Cart forClient: clientId withPassword: password! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 19:33:24' prior: 50650344!
test01CreateCartWithValidParameters
	| cart clientId  password |
	password := 'contrasenia'.
	clientId := 1234567.
	cart := Cart forClient: clientId withPassword: password.
	self assert: cart isEmpty.
	self deny: cart hasExpired.! !
!Cart class methodsFor: 'nil' stamp: 'FK 10/30/2023 19:35:05'!
forClient: aClientId withPassword: aString
	^self new initializeWithClientId: aClientId andPassword: aString.! !
!Cart class methodsFor: 'nil' stamp: 'FK 10/30/2023 19:35:04' prior: 50650363!
forClient: aClientId withPassword: aString
	^self new initializeWithClientId: aClientId andPassword: aString.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 19:37:51' prior: 50650353!
test01CreateCartWithValidParameters
	| cart clientId  password cartId |
	password := 'contrasenia'.
	clientId := 1234567.
	cartId := Cart forClient: clientId withPassword: password.
	self assert: cart isEmpty.
	self deny: cart hasExpired.! !

OrderedCollection allInstances!

OrderedCollection allInstances!
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 19:43:31' prior: 50650376!
test01CreateCartWithValidParameters
	| clientId  password cartId cart |
	password := 'contrasenia'.
	clientId := 1234567.
	cartId := Cart forClient: clientId withPassword: password.
	self assert: cart isEmpty.
	self deny: cart hasExpired.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 19:44:15'!
test01CreateCartWithNonEmptyPasswordAndNonEmptyClientId
	| clientId  password cartId |
	password := 'contrasenia'.
	clientId := 1234567.
	cartId := Cart forClient: clientId withPassword: password.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 19:45:47'!
test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty
	| cart clientId  password  |
	password := 'contrasenia'.
	clientId := 1234567.
	cart :=  Cart forClient: clientId withPassword: password.
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 19:45:56' prior: 50650408!
test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty
	| cart clientId password |
	password := 'contrasenia'.
	clientId := 1234567.
	cart :=  Cart forClient: clientId withPassword: password.
	self assert: cart isEmpty.
	! !
!Cart methodsFor: 'nil' stamp: 'FK 10/30/2023 19:46:58'!
initializeWithClientId: aClientId
	clientId := aClientId.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 19:48:58' prior: 50650369!
forClient: aClientId withPassword: aString
	^self new initializeWithClientId: aClientId.! !

!testRun: #CartTest #test01CreateCartWithNonEmptyPasswordAndNonEmptyClientId stamp: 'FK 10/30/2023 19:48:59'!
PASSED!

!testRun: #CartTest #test01CreateCartWithValidParameters stamp: 'FK 10/30/2023 19:48:59'!
ERROR!

!testRun: #CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 19:48:59'!
ERROR!

!methodRemoval: CartTest #test01CreateCartWithValidParameters stamp: 'FK 10/30/2023 19:49:11'!
test01CreateCartWithValidParameters
	| clientId  password cartId cart |
	password := 'contrasenia'.
	clientId := 1234567.
	cartId := Cart forClient: clientId withPassword: password.
	self assert: cart isEmpty.
	self deny: cart hasExpired.!

!methodRemoval: CartTest #test01CreateCartWithNonEmptyPasswordAndNonEmptyClientId stamp: 'FK 10/30/2023 19:49:12'!
test01CreateCartWithNonEmptyPasswordAndNonEmptyClientId
	| clientId  password cartId |
	password := 'contrasenia'.
	clientId := 1234567.
	cartId := Cart forClient: clientId withPassword: password.!

!testRun: #CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 19:49:14'!
ERROR!

!testRun: #CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 19:49:14'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 19:49:39' prior: 50650429!
initializeWithClientId: aClientId
	clientId := aClientId.
	cartElements := OrderedCollection new.! !

Object subclass: #Cart
	instanceVariableNames: 'clientId cartElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FK 10/30/2023 19:49:53'!
Object subclass: #Cart
	instanceVariableNames: 'clientId cartElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'nil' stamp: 'FK 10/30/2023 19:50:09'!
isEmpty
	cartElements isEmpty.! !

!testRun: #CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 19:50:11'!
ERROR!

!testRun: #CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 19:50:11'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 19:50:18' prior: 50650496!
isEmpty
	^cartElements isEmpty.! !

!testRun: #CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 19:50:21'!
PASSED!

!testRun: #CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 19:52:42'!
PASSED!

!testRun: #CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 19:52:42'!
PASSED!

1 allInstances !

Integer allInstances !

uno := 1.!

Integer allInstances .!

| cart clientId password |!

	cart :=  Cart forClient: clientId withPassword: password.!

Cart allInstances !

Cart allInstances count !

Cart allInstances size  !

Object subclass: #Cart
	instanceVariableNames: 'clientId cartElements lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FK 10/30/2023 19:57:01'!
Object subclass: #Cart
	instanceVariableNames: 'clientId cartElements lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Cart
	instanceVariableNames: 'clientId cartElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FK 10/30/2023 19:57:06'!
Object subclass: #Cart
	instanceVariableNames: 'clientId cartElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Cart class
	instanceVariableNames: 'lastId'!

!classDefinition: 'Cart class' category: 'TusLibros' stamp: 'FK 10/30/2023 19:57:12'!
Cart class
	instanceVariableNames: 'lastId'!

!classDefinition: 'Cart class' category: 'TusLibros' stamp: 'FK 10/30/2023 20:02:15'!
Cart class
	instanceVariableNames: 'lastId carts'!
!Cart class methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:02:13' prior: 50650434!
forClient: aClientId withPassword: aString
	lastId ifNotNil: [ lastId := lastId + 1] ifNil: [ lastId := 0 ] .
	carts := self new initializeWithClientId: aClientId andCartId: lastId.
	^lastId.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:07:35' prior: 50650565!
forClient: aClientId withPassword: aString
	| newCart |
	lastId ifNotNil: [ lastId := lastId + 1] ifNil: [ lastId := 0 ] .
	newCart := self new initializeWithClientId: aClientId andCartId: lastId.
	carts ifNotNil: [ carts := carts add: newCart] ifNil: [ carts := OrderedCollection with: newCart ].
	^lastId.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:15:00' prior: 50650575!
forClient: aClientId withPassword: aString
	^self new initializeWithClientId: aClientId.! !

Object subclass: #Cart
	instanceVariableNames: 'cartId cartElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FK 10/30/2023 20:15:24'!
Object subclass: #Cart
	instanceVariableNames: 'cartId cartElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:15:33' prior: 50650479!
initializeWithClientId: aClientId
	cartId := aClientId.
	cartElements := OrderedCollection new.! !

!testRun: #CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 20:15:50'!
PASSED!

!testRun: #CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 20:15:50'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:28:13'!
test02CartWithOneItemWhenIsbnIsKnown
	| cart clientId password isbn |
	password := 'contrasenia'.
	clientId := 1234567.
	isbn := '026204630X'.
	cart := Cart forClient: clientId withPassword: password.
	cart addBook: isbn quantity: 1.
	self deny: cart isEmpty.
	self assert: (cart hasBook: isbn).
	! !

!testRun: #CartTest #test02CartWithOneItemWhenIsbnIsKnown stamp: 'FK 10/30/2023 20:28:15'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:32:02'!
addBook: isbn quantity: aNumber
	aNumber timesRepeat: [cartElements add: isbn].! !

!testRun: #CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 20:32:10'!
PASSED!

!testRun: #CartTest #test02CartWithOneItemWhenIsbnIsKnown stamp: 'FK 10/30/2023 20:32:10'!
ERROR!

!testRun: #CartTest #test02CartWithOneItemWhenIsbnIsKnown stamp: 'FK 10/30/2023 20:32:10'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:32:34'!
test02CartWithOneItem
	| cart clientId password isbn |
	password := 'contrasenia'.
	clientId := 1234567.
	isbn := '026204630X'.
	cart := Cart forClient: clientId withPassword: password.
	cart addBook: isbn quantity: 1.
	self deny: cart isEmpty.
	self assert: (cart hasBook: isbn).
	! !

!methodRemoval: CartTest #test02CartWithOneItemWhenIsbnIsKnown stamp: 'FK 10/30/2023 20:32:34'!
test02CartWithOneItemWhenIsbnIsKnown
	| cart clientId password isbn |
	password := 'contrasenia'.
	clientId := 1234567.
	isbn := '026204630X'.
	cart := Cart forClient: clientId withPassword: password.
	cart addBook: isbn quantity: 1.
	self deny: cart isEmpty.
	self assert: (cart hasBook: isbn).
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:32:56'!
test01CreatedCartIsEmpty
	| cart clientId password |
	password := 'contrasenia'.
	clientId := 1234567.
	cart :=  Cart forClient: clientId withPassword: password.
	self assert: cart isEmpty.
	! !

!methodRemoval: CartTest #test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty stamp: 'FK 10/30/2023 20:32:56'!
test01CreatedCartWithNonEmptyPasswordAndNonEmptyClientIdIsEmpty
	| cart clientId password |
	password := 'contrasenia'.
	clientId := 1234567.
	cart :=  Cart forClient: clientId withPassword: password.
	self assert: cart isEmpty.
	!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:33:18'!
hasBook: isbn
	^cartElements includes: isbn.! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/30/2023 20:33:21'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/30/2023 20:33:21'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:34:46'!
test03CartWithOneItemManyTimes
	| cart clientId password isbn |
	password := 'contrasenia'.
	clientId := 1234567.
	isbn := '026204630X'.
	cart := Cart forClient: clientId withPassword: password.
	cart addBook: isbn quantity: 3.
	self assert: (cart hasBook: isbn times: 3).
	! !

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/30/2023 20:34:53'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:35:31'!
hasBook: isbn times: aNumber
	^aNumber = (cartElements count: isbn).! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/30/2023 20:35:35'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/30/2023 20:35:35'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/30/2023 20:35:35'!
ERROR!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/30/2023 20:35:35'!
ERROR!

#(1 2 3 2 1 3 2) count: 2!

#(1 2 3 2 1 3 2) count: [2]!

#(1 2 3 2 1 3 2) count: [ :a | a = 2]!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:37:19' prior: 50650718!
hasBook: isbn times: aNumber
	^aNumber = (cartElements count: [ :aBook | aBook = isbn]).! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/30/2023 20:37:22'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/30/2023 20:37:22'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/30/2023 20:37:22'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:39:26' prior: 50650738!
hasBook: isbn times: aNumber
	^aNumber = (cartElements occurrencesOf: isbn).! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/30/2023 20:39:29'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/30/2023 20:39:29'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/30/2023 20:39:29'!
PASSED!

!methodRemoval: Cart #hasBook: stamp: 'FK 10/30/2023 20:39:46'!
hasBook: isbn
	^cartElements includes: isbn.!

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/30/2023 20:39:49'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/30/2023 20:39:49'!
ERROR!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/30/2023 20:39:50'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/30/2023 20:39:50'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:40:03' prior: 50650650!
test02CartWithOneItem
	| cart clientId password isbn |
	password := 'contrasenia'.
	clientId := 1234567.
	isbn := '026204630X'.
	cart := Cart forClient: clientId withPassword: password.
	cart addBook: isbn quantity: 1.
	self deny: cart isEmpty.
	self assert: (cart hasBook: isbn times: 1).
	! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/30/2023 20:40:07'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/30/2023 20:40:07'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/30/2023 20:40:07'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:45:56'!
test04CartCantAddBookIfAmountIsBelowOne
	| cart clientId password isbn |
	password := 'contrasenia'.
	clientId := 1234567.
	isbn := '026204630X'.
	cart := Cart forClient: clientId withPassword: password.
	self should: [cart addBook: isbn quantity: -1]
		raise: Error
		withMessageText: 'Book quantity must be 1 or more.'.
	! !

!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/30/2023 20:46:00'!
FAILURE!

-1 timesRepeat: [^'hola'].!
!Cart class methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:48:29'!
bookToAddHasQuantityBelowOneErrorDescription
	^'Book quantity must be 1 or more'.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:48:50' prior: 50650818!
bookToAddHasQuantityBelowOneErrorDescription
	^'Book quantity must be 1 or more.'.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/30/2023 20:51:32' prior: 50650634!
addBook: isbn quantity: aNumber
	(aNumber < 1) ifTrue: [^self error: self class bookToAddHasQuantityBelowOneErrorDescription ].
	aNumber timesRepeat: [cartElements add: isbn].! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/30/2023 20:51:36'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/30/2023 20:51:36'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/30/2023 20:51:36'!
PASSED!

!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/30/2023 20:51:36'!
PASSED!

----SNAPSHOT----(31 October 2023 10:17:08) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (31 October 2023 21:25:41) as /Users/fran/Downloads/macos64/CuisUniversity-5981.image!


!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/31/2023 21:43:05'!
PASSED!

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/31/2023 21:43:08'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/31/2023 21:43:08'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/31/2023 21:43:08'!
PASSED!

!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/31/2023 21:43:08'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 21:52:24'!
test05CartListing
	| cart clientId password isbn1 isbn2 expectedText |
	password := 'contrasenia'.
	clientId := 1234567.
	isbn1 := '026204630X'.
	isbn2 := '026204631X'.
	cart := Cart forClient: clientId withPassword: password.
	cart addBook: isbn1 quantity: 1.
	cart addBook: isbn2 quantity: 2.
	expectedText := isbn1, '1', Character newLineCharacter asString,
				   isbn2, '2', Character newLineCharacter asString.
	self assert: cart listCart = expectedText.
	! !

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 21:52:30'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 21:55:24'!
listCart
	^cartElements inject: '' into: [ :cartList :cartBook | cartList, cartBook ].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 21:56:31' prior: 50650891!
listCart
	^cartElements inject: '' into: [ :cartList :cartBook | cartList, cartBook, cartBook quantity ].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 21:57:07' prior: 50650897!
listCart
	^cartElements inject: '' into: [ :cartList :cartBook | cartList, cartBook, cartElements quantity: cartBook ].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 21:58:04'!
quantity: anIsbn
	^cartElements count: [ :cartBook | cartBook = anIsbn ].! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/31/2023 21:58:09'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/31/2023 21:58:09'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/31/2023 21:58:09'!
PASSED!

!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/31/2023 21:58:09'!
PASSED!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 21:58:09'!
ERROR!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 21:58:09'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 21:58:40' prior: 50650904!
listCart
	^cartElements inject: '' into: [ :cartList :cartBook | cartList, cartBook, (cartElements quantity: cartBook) asString].! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/31/2023 21:58:43'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/31/2023 21:58:43'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/31/2023 21:58:44'!
PASSED!

!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/31/2023 21:58:44'!
PASSED!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 21:58:44'!
ERROR!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 21:58:44'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 21:59:00' prior: 50650933!
listCart
	^cartElements inject: '' into: [ :cartList :cartBook | cartList, cartBook, (self quantity: cartBook) asString].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 21:59:03' prior: 50650957!
listCart
	^cartElements inject: '' into: [ :cartList :cartBook | cartList, cartBook, (self quantity: cartBook) asString ].! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/31/2023 21:59:09'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/31/2023 21:59:09'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/31/2023 21:59:09'!
PASSED!

!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/31/2023 21:59:09'!
PASSED!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 21:59:09'!
FAILURE!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 21:59:09'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 21:59:48' prior: 50650964!
listCart
	^cartElements inject: '' into: [ :cartList :cartBook | 
		cartList, cartBook, (self quantity: cartBook) asString, Character newLineCharacter asString ].! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/31/2023 22:00:10'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/31/2023 22:00:10'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/31/2023 22:00:10'!
PASSED!

!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/31/2023 22:00:10'!
PASSED!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 22:00:10'!
FAILURE!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 22:00:10'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 22:01:53' prior: 50650871!
test05CartListing
	| cart clientId password isbn1 isbn2 expectedText actualText|
	password := 'contrasenia'.
	clientId := 1234567.
	isbn1 := '026204630X'.
	isbn2 := '026204631X'.
	cart := Cart forClient: clientId withPassword: password.
	cart addBook: isbn1 quantity: 1.
	cart addBook: isbn2 quantity: 2.
	expectedText := isbn1, '1', Character newLineCharacter asString,
				   isbn2, '2', Character newLineCharacter asString.
	actualText := cart listCart.
	self assert: actualText = expectedText.
	! !

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 22:01:54'!
FAILURE!

----End fileIn of /Users/fran/Downloads/macos64/Packages/TerseGuide.pck.st----!

| dic |!

dic := Dictionary new.!

dic := Dictionary new.!

dic add: '1234'->2!

dic add: '1234'->2.!

dic add: '2345'->1.!

dic add: '2345'->1.!

dic size.!

dic at: '1234'.!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 22:08:36' prior: 50650605!
initializeWithClientId: aClientId
	cartId := aClientId.
	cartElements := Dictionary new.! !

dic isEmpty.!

dic keys.!
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 22:09:47' prior: 50650830!
addBook: isbn quantity: aNumber
	(aNumber < 1) ifTrue: [^self error: self class bookToAddHasQuantityBelowOneErrorDescription ].
	cartElements add: isbn->aNumber.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 22:10:04' prior: 50650752!
hasBook: isbn times: aNumber
	^aNumber = (cartElements at: isbn).! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 22:12:35' prior: 50650988!
listCart
	| cartBooks |
	cartBooks := cartElements keys.
	^cartBooks inject: '' into: [ :cartList :cartBook | 
		cartList, cartBook, (cartElements at: cartBook) asString, Character newLineCharacter asString ].! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/31/2023 22:12:39'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/31/2023 22:12:39'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/31/2023 22:12:39'!
PASSED!

!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/31/2023 22:12:39'!
PASSED!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 22:12:39'!
FAILURE!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 22:12:39'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 22:13:32' prior: 50651013!
test05CartListing
	| cart clientId password isbn1 isbn2 expectedText actualText|
	password := 'contrasenia'.
	clientId := 1234567.
	isbn1 := '026204630X'.
	isbn2 := '026204631X'.
	cart := Cart forClient: clientId withPassword: password.
	cart addBook: isbn1 quantity: 1.
	cart addBook: isbn2 quantity: 2.
	expectedText := isbn2, '2', Character newLineCharacter asString,
				   isbn1, '1', Character newLineCharacter asString.
	actualText := cart listCart.
	self assert: actualText = expectedText.
	! !

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/31/2023 22:13:36'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/31/2023 22:13:36'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/31/2023 22:13:36'!
PASSED!

!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/31/2023 22:13:36'!
PASSED!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 22:13:36'!
PASSED!

!methodRemoval: Cart #quantity: stamp: 'FK 10/31/2023 22:13:47'!
quantity: anIsbn
	^cartElements count: [ :cartBook | cartBook = anIsbn ].!
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 22:15:33' prior: 50654006!
test05CartListing
	| cart clientId password isbn1 isbn2 expectedText actualText|
	password := 'contrasenia'.
	clientId := 1234567.
	isbn1 := '026204630X'.
	isbn2 := '026204631X'.
	cart := Cart forClient: clientId withPassword: password.
	cart addBook: isbn1 quantity: 1.
	cart addBook: isbn2 quantity: 2.
	expectedText := isbn2, '2', ' | ',
				   isbn1, '1', ' | '.
	actualText := cart listCart.
	self assert: actualText = expectedText.
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 22:16:05' prior: 50653979!
listCart
	| cartBooks |
	cartBooks := cartElements keys.
	^cartBooks inject: '' into: [ :cartList :cartBook | 
		cartList, cartBook, ' | ', (cartElements at: cartBook) asString, ' | ' ].! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 22:16:37' prior: 50654044!
test05CartListing
	| cart clientId password isbn1 isbn2 expectedText actualText|
	password := 'contrasenia'.
	clientId := 1234567.
	isbn1 := '026204630X'.
	isbn2 := '026204631X'.
	cart := Cart forClient: clientId withPassword: password.
	cart addBook: isbn1 quantity: 1.
	cart addBook: isbn2 quantity: 2.
	expectedText := isbn2, ' | ', '2', ' | ',
				   isbn1, ' | ', '1', ' | '.
	actualText := cart listCart.
	self assert: actualText = expectedText.
	! !

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 22:16:40'!
PASSED!

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/31/2023 22:16:40'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/31/2023 22:16:40'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/31/2023 22:16:40'!
PASSED!

!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/31/2023 22:16:40'!
PASSED!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 22:16:40'!
PASSED!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 22:16:51'!
PASSED!

!testRun: #CartTest #test01CreatedCartIsEmpty stamp: 'FK 10/31/2023 22:16:51'!
PASSED!

!testRun: #CartTest #test02CartWithOneItem stamp: 'FK 10/31/2023 22:16:51'!
PASSED!

!testRun: #CartTest #test03CartWithOneItemManyTimes stamp: 'FK 10/31/2023 22:16:51'!
PASSED!

!testRun: #CartTest #test04CartCantAddBookIfAmountIsBelowOne stamp: 'FK 10/31/2023 22:16:51'!
PASSED!

!testRun: #CartTest #test05CartListing stamp: 'FK 10/31/2023 22:16:51'!
PASSED!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FK 10/31/2023 22:30:03'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Date year: 2023 month: 31!

Date year: 2023 month: 12!

Date year: 2023 month: 11!

1 // 2023!

Date today!

Date newDay: 12 month: #July year: 1999!

12 july !

Date today!

Date today!

Date month: 12 year: 1998!

Date month: 11 year: 1998!

Date month:  October year: 2023 !

October / 2023!

October / 12 / 2023!

(October / 12 / 2023) class!

(October / 31 / 2023) !

(October / 30 / 2023) monthOfYear !

August class!

August class!

October isObject !

October // 2023!

October ofYear: 2023!

October ofYear: 2023 !

October ofYear: 2023 !

(December ofYear: 2022) < (October ofYear: 2023)!

(December ofYear: 2022) > (October ofYear: 2023)!

!classDefinition: #CreditCardChecker category: 'TusLibros' stamp: 'FK 10/31/2023 22:53:42'!
Object subclass: #CreditCardChecker
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'FK 10/31/2023 22:53:32'!
test01CreditCardNumberCannotBeEmpty
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := December ofYear: 2044.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	 CreditCardChecker 
		withCCNumber: aCreditCardNumber 
		expirationDate: expiration
		owner: anOwner
		andAmount: anAmount! !
!CreditCardTest class methodsFor: 'nil' stamp: 'FK 10/31/2023 22:55:19'!
withCCNumber: aCreditCardNumber expirationDate: expiration owner: anOwner andAmount: anAmount
	self new 
		initializeWithCCNumber: aCreditCardNumber
		expiration: expiration
		owner: anOwner 
		amount: anAmount.! !
!CreditCardTest class methodsFor: 'nil' stamp: 'FK 10/31/2023 22:55:19' prior: 50654172!
withCCNumber: aCreditCardNumber expirationDate: expiration owner: anOwner andAmount: anAmount
	self new 
		initializeWithCCNumber: aCreditCardNumber
		expiration: expiration
		owner: anOwner 
		amount: anAmount.! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FK 10/31/2023 22:57:13'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FK 10/31/2023 22:57:15'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'creditCardNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FK 10/31/2023 22:57:16'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'creditCardNumber expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FK 10/31/2023 22:57:17'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'creditCardNumber expirationDate owner amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'FK 10/31/2023 22:57:11'!
initializeWithCCNumber: aCreditCardNumber expiration: expiration owner: anOwner amount: anAmount.
	creditCardNumber := aCreditCardNumber.
	expirationDate  := expiration.
	owner := anOwner. 
	amount := anAmount.! !

!classDefinition: #CreditCardChecker category: 'TusLibros' stamp: 'FK 10/31/2023 22:57:32'!
Object subclass: #CreditCardChecker
	instanceVariableNames: 'creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardChecker category: 'TusLibros' stamp: 'FK 10/31/2023 22:57:33'!
Object subclass: #CreditCardChecker
	instanceVariableNames: 'creditCardNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardChecker category: 'TusLibros' stamp: 'FK 10/31/2023 22:57:34'!
Object subclass: #CreditCardChecker
	instanceVariableNames: 'creditCardNumber expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardChecker category: 'TusLibros' stamp: 'FK 10/31/2023 22:57:35'!
Object subclass: #CreditCardChecker
	instanceVariableNames: 'creditCardNumber expirationDate owner amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardChecker methodsFor: 'nil' stamp: 'FK 10/31/2023 22:57:30'!
initializeWithCCNumber: aCreditCardNumber expiration: expiration owner: anOwner amount: anAmount.
	creditCardNumber := aCreditCardNumber.
	expirationDate  := expiration.
	owner := anOwner. 
	amount := anAmount.! !

!methodRemoval: CreditCardTest #initializeWithCCNumber:expiration:owner:amount: stamp: 'FK 10/31/2023 22:57:46'!
initializeWithCCNumber: aCreditCardNumber expiration: expiration owner: anOwner amount: anAmount.
	creditCardNumber := aCreditCardNumber.
	expirationDate  := expiration.
	owner := anOwner. 
	amount := anAmount.!

!methodRemoval: CreditCardTest class #withCCNumber:expirationDate:owner:andAmount: stamp: 'FK 10/31/2023 22:57:53'!
withCCNumber: aCreditCardNumber expirationDate: expiration owner: anOwner andAmount: anAmount
	self new 
		initializeWithCCNumber: aCreditCardNumber
		expiration: expiration
		owner: anOwner 
		amount: anAmount.!
!CreditCardChecker class methodsFor: 'nil' stamp: 'FK 10/31/2023 22:58:02'!
withCCNumber: aCreditCardNumber expirationDate: expiration owner: anOwner andAmount: anAmount
	self new 
		initializeWithCCNumber: aCreditCardNumber
		expiration: expiration
		owner: anOwner 
		amount: anAmount.! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FK 10/31/2023 23:01:13'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'creditCardNumber expirationDate owner amount creditCardChecker'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:01:16' prior: 50654159!
test01CreditCardNumberCannotBeEmpty
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := December ofYear: 2044.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker :=  CreditCardChecker 
		withCCNumber: aCreditCardNumber 
		expirationDate: expiration
		owner: anOwner
		andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Credit Card Number is not valid'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:01:24'!
FAILURE!
!CreditCardChecker methodsFor: 'nil' stamp: 'FK 10/31/2023 23:03:06'!
check
	self error: 'Credit card number is not valid'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:03:11'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:03:11'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:03:27' prior: 50654314!
test01CreditCardNumberCannotBeEmpty
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := December ofYear: 2044.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker :=  CreditCardChecker 
		withCCNumber: aCreditCardNumber 
		expirationDate: expiration
		owner: anOwner
		andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Credit Card Number is not valid'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:03:29'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:04:37'!
FAILURE!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:04:47' prior: 50654335!
check
	^self error: 'Credit card number is not valid'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:04:48'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:04:48'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:05:03' prior: 50654347!
test01CreditCardNumberCannotBeEmpty
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := December ofYear: 2044.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker :=  CreditCardChecker 
		withCCNumber: aCreditCardNumber 
		expirationDate: expiration
		owner: anOwner
		andAmount: anAmount.
	self 
		should: creditCardChecker check
		raise: Error
		withMessageText: 'Credit Card Number is not valid'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:05:04'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:05:28'!
ERROR!
!CreditCardChecker class methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:05:51' prior: 50654295!
withCCNumber: aCreditCardNumber expirationDate: expiration owner: anOwner andAmount: anAmount
	^self new 
		initializeWithCCNumber: aCreditCardNumber
		expiration: expiration
		owner: anOwner 
		amount: anAmount.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:05:53'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:05:53'!
ERROR!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:06:06' prior: 50654384!
test01CreditCardNumberCannotBeEmpty
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := December ofYear: 2044.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker :=  CreditCardChecker 
		withCCNumber: aCreditCardNumber 
		expirationDate: expiration
		owner: anOwner
		andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Credit Card Number is not valid'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:06:10'!
FAILURE!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:06:30' prior: 50654372!
check
	^self error: 'Credit Card number is not valid'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:06:31'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:06:31'!
FAILURE!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:06:59' prior: 50654448!
check
	^self error: 'Credit Card Number is not valid'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:07:01'!
PASSED!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:07:27' prior: 50654460!
check
	^self error: (self class errorMessageCreditCardNumberIsEmpty).! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:07:46'!
FAILURE!
!CreditCardChecker class methodsFor: 'nil' stamp: 'FK 10/31/2023 23:09:02'!
errorMessageCreditCardNumberIsEmpty
	^'Credit Card Number is not valid'! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:09:04'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:09:32' prior: 50654426!
test01CreditCardNumberCannotBeEmpty
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := ''.
	expiration := December ofYear: 2044.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker :=  CreditCardChecker 
		withCCNumber: aCreditCardNumber 
		expirationDate: expiration
		owner: anOwner
		andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Credit Card Number is not valid'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:09:33'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:09:33'!
PASSED!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:10:27' prior: 50654469!
check
	^(creditCardNumber isEmpty) ifTrue: [ self error: (self class errorMessageCreditCardNumberIsEmpty). ]! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:10:28'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:12:54' prior: 50654486!
test01CreditCardNumberCannotBeEmpty
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := ''.
	expiration := December ofYear: 2044.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker := 
	 CreditCardChecker 
		withCCNumber: aCreditCardNumber 
		expirationDate: expiration
		owner: anOwner
		andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Credit Card Number is not valid'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:12:55'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:12:55'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:13:13' prior: 50654521!
test01CreditCardNumberCannotBeEmpty
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := ''.
	expiration := December ofYear: 2044.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Credit Card Number is not valid'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:13:14'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 10/31/2023 23:13:14'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:16:06'!
test02ExpiredCreditCardDoesNotPassCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := ''.
	expiration := December ofYear: 1998.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Credit Card Number is expired'.! !

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 10/31/2023 23:16:07'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 10/31/2023 23:16:38' prior: 50654570!
test02ExpiredCreditCardDoesNotPassCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := December ofYear: 1998.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Credit Card Number is expired'.! !

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 10/31/2023 23:16:38'!
FAILURE!

Date today > (October of: 2023)!

FixedGregorianDate today!

FixedGregorianDate today > October ofYear: 2024!

(FixedGregorianDate today) > October ofYear: 2024!

(FixedGregorianDate today) > (October ofYear: 2024)!

(FixedGregorianDate today) !

(FixedGregorianDate today) > (FixedGregorianDate today)!

(FixedGregorianDate today) > (FixedGregorianDate yesterday)!

(FixedGregorianDate today) > (October)!

(FixedGregorianDate year) > (October)!

(FixedGregorianDate today month) > (October)!

(FixedGregorianDate today ) < (October)!

(FixedGregorianDate today ) < (October ofYear: 2023)!

(FixedGregorianDate today ) < (October ofYear: 2023)!

(FixedGregorianDate today ) < (October ofYear: 2023)!

Date today!

(Date today) month !

(Date today) monthOfYear !

(Date today) month!

(Date today) month!

(Date today) month == (October ofYear: 2023)!

((Date today) month) == (October ofYear: 2023)!

((Date today) month) == (October ofYear: 2023)!

((Date today) month) == (October ofYear: 2023)!

((Date today) month) > (October ofYear: 2023)!

((Date today) month) = (October ofYear: 2023)!

((Date today) month) < (September ofYear: 2023)!

(October ofYear: 2023)!

(October ofYear: 2023) class!

GregorianDate today!

(October ofYear: 2023)!

(October ofYear: 2023) class!

GregorianMonth current!

(Date today) month!

(October ofYear: 2023)!

((October ofYear: 2023) asSmalltalkDate ) > (Date today)!

((October ofYear: 2023) asSmalltalkDate ) > (Date today)!

((October ofYear: 2023) class)!

(Date today) month!

((Date today) month) class!

Date month: October year: 2023!

(Date month: October year: 2023)!

(Date month: October year: 2023) class!

GregorianMonthOfYear month: August year: 2023!

August ofYear: 2023!

(August ofYear: 2023) class!

(August ofYear: 2023) < (GregorianMonthOfYear current)!

(August ofYear: 2023) < (GregorianMonthOfYear current)!

(August ofYear: 2023) < (GregorianMonthOfYear current)!

FixedGregorianDate current!

FixedGregorianDate today !

(FixedGregorianDate today) > (October ofYear: 2023)!

(FixedGregorianDate today) between: (October ofYear: 2023)  and: (November ofYear: 2023)!

(FixedGregorianDate today) between: (October)  and: (November ofYear: 2023)!

(FixedGregorianDate today) class!

(FixedGregorianDate today) month!

(FixedGregorianDate today) year!

((FixedGregorianDate today) month) > (October)!

((FixedGregorianDate today) month) between: December and: December!

((FixedGregorianDate today) month) > October!

((FixedGregorianDate today) month) < October!

((FixedGregorianDate today) month) < October!

((FixedGregorianDate today) month) < October!

((FixedGregorianDate today) month) < (October ofYear: 2023)!

((FixedGregorianDate today) month) < ((October ofYear: 2023) month)!

((FixedGregorianDate today) month) < ((October ofYear: 2023) month)!

((FixedGregorianDate today) month) < ((November ofYear: 2023) month) false .!

((FixedGregorianDate today) month) < ((November ofYear: 2023) month)!

October / 5 / 2023 !

(October / 5 / 2023) class!
TerseGuideHelp is adapted from the Squeak terse guide by Chris Rathman (http://www.angelfire.com/tx4/cus/notes/smalltalk.html), maintained on the swiki at http://wiki.squeak.org/squeak/5699. Copyrights and credit for the original document belong to Chris Rathman.

Examples of use include:

TerseGuideHelp display: #arithmetic
TerseGuideHelp display: #array
TerseGuideHelp display: #transcript

TerseGuideHelp also serves as the model for TerseGuideWindow, which can be opened by:

TerseGuideWindow openTerseGuide
!
Show a terse guide to Cuis in a system window. The window has a text pane with a list pane beside it. The text pane is a kind of Workspace which has the behavior that statements in it can be Done (Cmd-d) or Printed (Cmd-p) in order to observe their effect.

TerseGuideWindow openTerseGuide
!
I represent a topic that can be added to the TerseGuide. Subclasses of me should implement #title and #examples. For instance:

>>title
    ^ 'Numbers'

>> examples
     ^ {
            { #code -> '4 factorial' . #category -> 'Common functions' . #description -> 'factorial' } as: Dictionary.
            { #code -> '2 even' . #category -> 'Common functions' . #description -> 'check if a number is even' } as: Dictionary.
        }!

----SNAPSHOT----(1 November 2023 00:54:57) CuisUniversity-5981.image priorSource: 10214372!

----QUIT----(1 November 2023 00:55:00) CuisUniversity-5981.image priorSource: 10337829!

----STARTUP---- (1 November 2023 21:41:06) as /Users/fran/Downloads/macos64/CuisUniversity-5981.image!


!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 21:46:08'!
FAILURE!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 21:46:08'!
FAILURE!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 21:48:59' prior: 50654511!
check
	(creditCardNumber isEmpty) ifTrue: [ ^self error: (self class errorMessageCreditCardNumberIsEmpty). ].
	(expirationDate isExpired) ifTrue: [^self error: self class errorMessageCreditCardIsExpired].! !
!CreditCardChecker class methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 21:49:19'!
errorMessageCreditCardIsExpired
	^'Credit Card is expired'! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 21:49:39' prior: 50654592!
test02ExpiredCreditCardDoesNotPassCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := December ofYear: 1998.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Credit Card is expired'.! !
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 21:50:28' prior: 50654725!
check
	(creditCardNumber isEmpty) ifTrue: [ ^self error: (self class errorMessageCreditCardNumberIsEmpty). ].
	(self isExpired) ifTrue: [^self error: self class errorMessageCreditCardIsExpired].! !
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 21:51:18'!
isExpired
	^expirationDate.
	! !

(December ofYear: 2020) class!

(December ofYear: 2020) month!

(December ofYear: 2020) year!

(December ofYear: 2020) month class!

(December ofYear: 2020) month.!

Date today!

Date today month!

Date today year!

Date today month class!

Date today month!

(December ofYear: 2020).!

Date today month.!

Date today monthName!

FixedGregorianDate today month!

(FixedGregorianDate today month) ofYear: (FixedGregorianDate today year).!

(December ofYear: 2020).!

| aD bD |!

aD := (December ofYear: 2020).!

bD := (FixedGregorianDate today month) ofYear: (FixedGregorianDate today year).!

aD < bD.!

aD := (December ofYear: 2020).!

Date today year!

aD < bD.!

aD class < bD.!

aD := (December ofYear: 2020) class!

aD := (December ofYear: 2020).!

bD := (FixedGregorianDate today month) ofYear: (FixedGregorianDate today year).!

bD class.!

aD class.!

aD class.!

aD class.!

bD class.!

aD < bD.!

aD year!

bD year!

bD year!

aD := (December ofYear: 2020) month.!

bD := (FixedGregorianDate today) month!

bD := (FixedGregorianDate today) year.!

aD := (December ofYear: 2020) year.!

bD := (Date today) year.!

bD := (GregorianDate today) year.!

bD := (Date today) year.!

bD := (DateAndTime today) year.!

bD := (FixedGregorianDate today) year.!

bD := (GregorianDate today) year.!

bD := (GregorianDay today) year.!

bD := (GregorianDayOfMonth today) year.!

bD := (GregorianDay today) year.!

bD := (GregorianDay today).!

bD := (GregorianDayOfMonth today).!

bD := (GregorianDayOfMonth today) month.!

aD := (December ofYear: 2020) class.!

bD monthOfYear !

bD := (FixedGregorianDate today).!

aD := (December ofYear: 2020).!

bD > aD!

bD distanceFrom: aD.!

aD := (FixedGregorianDate yearNumber: 2023 monthNumber: 1 dayNumber: 1).!

bD distanceFrom: aD.!

October / 8 / 2023 class!

(October / 8 / 2023) class!

bD includes: aD.!

bD < aD.!

bD > aD.!

| aD bD digits |!

digits := 052023.!

digits / 10000.!

digits // 10000.!

digits % 10000.!

digits mod: 10000.!

digits := 052023.!

aD := (FixedGregorianDate yearNumber: (digits mod: 10000) monthNumber: (digits / 10000) dayNumber: 1).!

bD := (FixedGregorianDate today).!

bD > aD.!

bD < aD.!

						(FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1)!

((FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1) distanceTo: (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1))!

((FixedGregorianDate today) distanceTo: (FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1)).!

cD := October / 2023!

cD := October / 2023.!

cD monthNumber !

(FixedGregorianDate today)!

(FixedGregorianDate today) month!

(FixedGregorianDate today) year!

(FixedGregorianDate today) = (cD year)!

cD := October ofYear: 2023.!

(FixedGregorianDate today year) = (cD year)!

October / 7 / 2023.!

October / 7 / 2023 class!

(October / 7 / 2023) class!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 22:42:09' prior: 50654546!
test01CreditCardNumberCannotBeEmpty
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := ''.
	expiration := 122044.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Credit Card Number is not valid'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 22:42:17' prior: 50654740!
test02ExpiredCreditCardDoesNotPassCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := 121998.
	anOwner := 'Pepe Sanchez'.
	anAmount := '12.13'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Credit Card is expired'.! !
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 22:45:34' prior: 50654768!
isExpired
	| expirationDateAsFGD todayDate |

	expirationDateAsFGD := FixedGregorianDate yearNumber: (expirationDate mod: 10000) 
										    monthNumber: (expirationDate / 10000) 
										    dayNumber: 1.
	todayDate := (FixedGregorianDate today).
	^expirationDateAsFGD < todayDate.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 22:45:38'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:45:38'!
FAILURE!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:45:38'!
FAILURE!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:47:04'!
FAILURE!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 22:47:37' prior: 50654898!
isExpired
	| expirationDateAsFGD todayDate |

	expirationDateAsFGD := (FixedGregorianDate yearNumber: (expirationDate mod: 10000) 
										    monthNumber: (expirationDate / 10000) 
										    dayNumber: 1).
	todayDate := (FixedGregorianDate today).
	^expirationDateAsFGD < todayDate.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 22:47:40'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:47:40'!
FAILURE!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:47:40'!
FAILURE!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:48:23'!
FAILURE!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:49:01'!
FAILURE!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:50:04'!
FAILURE!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 22:51:30' prior: 50654924!
isExpired
	| expDate todayDate |

	expDate := (FixedGregorianDate yearNumber: (expirationDate mod: 10000) monthNumber: (expirationDate / 10000) dayNumber: 1).
	todayDate := (FixedGregorianDate today).
	^expDate < todayDate.! !
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 22:51:49' prior: 50654957!
isExpired
	| expDate todayDate |

	expDate := (FixedGregorianDate yearNumber: (expirationDate mod: 10000) monthNumber: (expirationDate / 10000) dayNumber: 1).
	todayDate := (FixedGregorianDate today).
	^(expDate < todayDate).! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 22:51:52'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:51:52'!
FAILURE!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:51:52'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 22:52:09'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:53:01'!
FAILURE!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 22:54:29' prior: 50654968!
isExpired
	| expDate todayDate exp1 exp2 exp3 |

	exp1 := (expirationDate mod: 10000).
	exp2 := (expirationDate / 10000).
	exp3 := 1.
	expDate := (FixedGregorianDate yearNumber: exp1 monthNumber: exp2 dayNumber: exp3).
	todayDate := (FixedGregorianDate today).
	^(expDate < todayDate).! !

digits / 10000.!

digits // 10000.!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 22:47:37' prior: 50654996!
isExpired
	| expirationDateAsFGD todayDate |

	expirationDateAsFGD := (FixedGregorianDate yearNumber: (expirationDate mod: 10000) 
										    monthNumber: (expirationDate / 10000) 
										    dayNumber: 1).
	todayDate := (FixedGregorianDate today).
	^expirationDateAsFGD < todayDate.! !
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 22:56:12' prior: 50655010!
isExpired
	| expirationDateAsFGD todayDate |

	expirationDateAsFGD := (FixedGregorianDate yearNumber: (expirationDate mod: 10000) 
										    monthNumber: (expirationDate // 10000) 
										    dayNumber: 1).
	todayDate := (FixedGregorianDate today).
	^expirationDateAsFGD < todayDate.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 22:56:15'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 22:56:15'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:02:28'!
test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := 122024.
	anOwner := 'Adolph Blaine Charles David Earl Frederick Gerald Hubert Irvin John Kenneth Lloyd Martin Nero Oliver Paul Quincy 
				Randolph Sherman Thomas Uncas Victor William Xerxes Yancy Zeus Apollo 
				Wolfe­schlegelstein­hausenberger­dorffvoraltern­waren­gewissenhaft­schaferswessen­schafewaren­wohlgepflege­und­sorgfaltigkeit­beschutzen­von­angreifen­durch­ihrraubgierigfeinde­welche­voraltern­zwolftausend­jahres­vorandieerscheinen­wander­ersteer­dem­enschderraumschiff­gebrauchlicht­als­sein­ursprung­von­kraftgestart­sein­lange­fahrt­hinzwischen­sternartigraum­auf­der­suchenach­diestern­welche­gehabt­bewohnbar­planeten­kreise­drehen­sich­und­wohin­der­neurasse­von­verstandigmen­schlichkeit­konnte­fortplanzen­und­sicher­freuen­anlebens­langlich­freude­und­ruhe­mit­nicht­ein­furcht­vor­angreifen­von­anderer­intelligent­geschopfs­von­hinzwischen­sternartigraum'.
	anAmount := '12.13'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Owner name is longer than 30 characters'.! !

!testRun: #CreditCardTest #test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:02:30'!
FAILURE!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:03:53' prior: 50654759!
check
	(creditCardNumber isEmpty) ifTrue: [ ^self error: (self class errorMessageCreditCardNumberIsEmpty). ].
	(self isExpired) ifTrue: [^self error: self class errorMessageCreditCardIsExpired].
	(owner size > 30) ifTrue: [^self error: self class errorMessageOwnerNameIsTooLong ].! !
!CreditCardChecker class methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:04:22'!
errorMessageOwnerNameIsTooLong
	^'Owner name is longer than 30 characters'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 23:05:05'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 23:05:05'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:05:05'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 23:05:11'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 23:05:11'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:05:11'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:12:25'!
test04TransactionAmountLargerThan18CharacterDoesNotPassCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := 121998.
	anOwner := 'Pepe Sanchez'.
	anAmount := '123456789123456789.13'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Transaction Amount must be at most 15 digits followed by a dot and 2 digits'.! !

!testRun: #CreditCardTest #test04TransactionAmountLargerThan18CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:12:27'!
FAILURE!
!CreditCardChecker class methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:13:22'!
errorMessageTransactionAmountWrongFormat
	^'Transaction Amount must be at most 15 digits followed by a dot and 2 digits'! !
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:15:11' prior: 50655094!
check
	(creditCardNumber isEmpty) ifTrue: [^self error: (self class errorMessageCreditCardNumberIsEmpty)].
	(self isExpired) ifTrue: [^self error: self class errorMessageCreditCardIsExpired].
	(owner size > 30) ifTrue: [^self error: self class errorMessageOwnerNameIsTooLong].
	(self amountHasWrongFormat) ifTrue: [^self error: self class errorMessageTransactionAmountWrongFormat].! !

a := '123456789123456789.1314'.!

a indexOf: '.' startingAt: 1 ifAbsent: [^'no hay punto'].!

a indexOf: $. startingAt: 1 ifAbsent: [^'no hay punto'].!

a copyFrom: 1 to: 19.!

a copyFrom: 1 to: 18.!

a copyFrom: 20 to: (a size).!

a copyFrom: 20 to: (a size -1).!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:28:34'!
amountHasWrongFormat
	| dotIx integerPart decimalPart |
	dotIx := amount indexOf: $. startingAt: 1 ifAbsent: [^true].
	integerPart := amount copyFrom: 1 to: (dotIx-1).
	decimalPart := amount copyFrom: (dotIx+1) to: (amount size).
	! !
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:29:29' prior: 50655189!
amountHasWrongFormat
	| dotIx integerPart decimalPart |
	dotIx := amount indexOf: $. startingAt: 1 ifAbsent: [^true].
	integerPart := amount copyFrom: 1 to: (dotIx-1).
	decimalPart := amount copyFrom: (dotIx+1) to: (amount size).
	^(integerPart size > 15) or: (decimalPart size > 2).
	! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 23:29:34'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 23:29:35'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:29:35'!
PASSED!

!testRun: #CreditCardTest #test04TransactionAmountLargerThan18CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:29:35'!
FAILURE!

!testRun: #CreditCardTest #test04TransactionAmountLargerThan18CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:29:35'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:29:54' prior: 50655133!
test04TransactionAmountLargerThan18CharacterDoesNotPassCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := 122024.
	anOwner := 'Pepe Sanchez'.
	anAmount := '123456789123456789.13'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Transaction Amount must be at most 15 digits followed by a dot and 2 digits'.! !

!testRun: #CreditCardTest #test04TransactionAmountLargerThan18CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:29:58'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 23:29:58'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 23:29:58'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:29:58'!
PASSED!

!testRun: #CreditCardTest #test04TransactionAmountLargerThan18CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:29:58'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:31:09'!
test04TransactionAmountWithCharactersDoesNotPassCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := 122024.
	anOwner := 'Pepe Sanchez'.
	anAmount := '1234567891c3456789.1d'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Transaction Amount must be at most 15 digits followed by a dot and 2 digits'.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:31:29'!
test05TransactionAmountWithCharactersDoesNotPassCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := 122024.
	anOwner := 'Pepe Sanchez'.
	anAmount := '1234567891c3456789.1d'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Transaction Amount must be at most 15 digits followed by a dot and 2 digits'.! !

!methodRemoval: CreditCardTest #test04TransactionAmountWithCharactersDoesNotPassCheck stamp: 'FK 11/1/2023 23:31:29'!
test04TransactionAmountWithCharactersDoesNotPassCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := 122024.
	anOwner := 'Pepe Sanchez'.
	anAmount := '1234567891c3456789.1d'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Transaction Amount must be at most 15 digits followed by a dot and 2 digits'.!

a copyFrom: 1 to: 18.!

a := '12345678912c3456789.1314'.!

a copyFrom: 1 to: 18. !

(a copyFrom: 1 to: 18) allSatisfy: [ :i | i isDigit ].!

a := '123456789123456789.1314'.!

(a copyFrom: 1 to: 18) allSatisfy: [ :i | i isDigit ].!

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 23:35:04'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 23:35:04'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:35:04'!
PASSED!

!testRun: #CreditCardTest #test04TransactionAmountLargerThan18CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:35:04'!
PASSED!

!testRun: #CreditCardTest #test05TransactionAmountWithCharactersDoesNotPassCheck stamp: 'FK 11/1/2023 23:35:04'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:35:27' prior: 50655290!
test05TransactionAmountWithCharactersDoesNotPassCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := 122024.
	anOwner := 'Pepe Sanchez'.
	anAmount := '123c123.1d'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self 
		should: [creditCardChecker check]
		raise: Error
		withMessageText: 'Transaction Amount must be at most 15 digits followed by a dot and 2 digits'.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 23:35:30'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 23:35:31'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:35:31'!
PASSED!

!testRun: #CreditCardTest #test04TransactionAmountLargerThan18CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:35:31'!
PASSED!

!testRun: #CreditCardTest #test05TransactionAmountWithCharactersDoesNotPassCheck stamp: 'FK 11/1/2023 23:35:31'!
FAILURE!

!testRun: #CreditCardTest #test05TransactionAmountWithCharactersDoesNotPassCheck stamp: 'FK 11/1/2023 23:35:31'!
FAILURE!

(a copyFrom: 1 to: 18) anySatisfy: [ :i | i isDigit not ].!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:37:45' prior: 50655200!
amountHasWrongFormat
	| dotIx integerPart decimalPart |
	dotIx := amount indexOf: $. startingAt: 1 ifAbsent: [^true].
	integerPart := amount copyFrom: 1 to: (dotIx-1).
	decimalPart := amount copyFrom: (dotIx+1) to: (amount size).
	^(integerPart size > 15) or: (decimalPart size > 2) 
	or: (integerPart anySatisfy: [ :i | i isDigit not ]) or: (decimalPart anySatisfy: [ :i | i isDigit not ]).
	! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 23:37:49'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 23:37:49'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:37:49'!
PASSED!

!testRun: #CreditCardTest #test04TransactionAmountLargerThan18CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:37:49'!
PASSED!

!testRun: #CreditCardTest #test05TransactionAmountWithCharactersDoesNotPassCheck stamp: 'FK 11/1/2023 23:37:49'!
PASSED!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:45:20' prior: 50655402!
amountHasWrongFormat
	| dotIx integerPart decimalPart |
	
	dotIx := amount indexOf: $. startingAt: 1 ifAbsent: [^true].
	
	integerPart := amount copyFrom: 1 to: (dotIx-1).
	decimalPart := amount copyFrom: (dotIx+1) to: (amount size).
	
	^(integerPart size > 15) or: (decimalPart size > 2) 
	or: (integerPart anySatisfy: [ :i | i isDigit not ]) or: (decimalPart anySatisfy: [ :i | i isDigit not ]).
	! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 23:45:23'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 23:45:23'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:45:23'!
PASSED!

!testRun: #CreditCardTest #test04TransactionAmountLargerThan18CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:45:23'!
PASSED!

!testRun: #CreditCardTest #test05TransactionAmountWithCharactersDoesNotPassCheck stamp: 'FK 11/1/2023 23:45:23'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:51:59'!
test06ValidCreditCardPassesCheck
	| aCreditCardNumber expiration anOwner anAmount|
	aCreditCardNumber := '5400000000000001'.
	expiration := 122024.
	anOwner := 'Pepe Sanchez'.
	anAmount := '123123.10'.
	creditCardChecker := 
	 	CreditCardChecker 
			withCCNumber: aCreditCardNumber 
			expirationDate: expiration
			owner: anOwner
			andAmount: anAmount.
	self assert: creditCardChecker check.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 23:52:04'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 23:52:05'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:52:05'!
PASSED!

!testRun: #CreditCardTest #test04TransactionAmountLargerThan18CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:52:05'!
PASSED!

!testRun: #CreditCardTest #test05TransactionAmountWithCharactersDoesNotPassCheck stamp: 'FK 11/1/2023 23:52:05'!
PASSED!

!testRun: #CreditCardTest #test06ValidCreditCardPassesCheck stamp: 'FK 11/1/2023 23:52:05'!
ERROR!

!testRun: #CreditCardTest #test06ValidCreditCardPassesCheck stamp: 'FK 11/1/2023 23:52:05'!
ERROR!
!CreditCardChecker methodsFor: 'as yet unclassified' stamp: 'FK 11/1/2023 23:52:17' prior: 50655166!
check
	(creditCardNumber isEmpty) ifTrue: [^self error: (self class errorMessageCreditCardNumberIsEmpty)].
	(self isExpired) ifTrue: [^self error: self class errorMessageCreditCardIsExpired].
	(owner size > 30) ifTrue: [^self error: self class errorMessageOwnerNameIsTooLong].
	(self amountHasWrongFormat) ifTrue: [^self error: self class errorMessageTransactionAmountWrongFormat].
	^true.! !

!testRun: #CreditCardTest #test01CreditCardNumberCannotBeEmpty stamp: 'FK 11/1/2023 23:52:20'!
PASSED!

!testRun: #CreditCardTest #test02ExpiredCreditCardDoesNotPassCheck stamp: 'FK 11/1/2023 23:52:20'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerNameWithMoreThan30CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:52:20'!
PASSED!

!testRun: #CreditCardTest #test04TransactionAmountLargerThan18CharacterDoesNotPassCheck stamp: 'FK 11/1/2023 23:52:20'!
PASSED!

!testRun: #CreditCardTest #test05TransactionAmountWithCharactersDoesNotPassCheck stamp: 'FK 11/1/2023 23:52:20'!
PASSED!

!testRun: #CreditCardTest #test06ValidCreditCardPassesCheck stamp: 'FK 11/1/2023 23:52:20'!
PASSED!

----SNAPSHOT----(1 November 2023 23:58:43) CuisUniversity-5981.image priorSource: 10337922!

----STARTUP---- (2 November 2023 18:35:54) as /Users/fran/Downloads/macos64/CuisUniversity-5981.image!


!classRemoval: #CreditCardChecker stamp: 'FK 11/2/2023 18:36:03'!
Object subclass: #CreditCardChecker
	instanceVariableNames: 'creditCardNumber expirationDate owner amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FK 11/2/2023 18:36:03'!
Object subclass: #Cart
	instanceVariableNames: 'cartId cartElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'FK 11/2/2023 18:36:04'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'creditCardNumber expirationDate owner amount creditCardChecker'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FK 11/2/2023 18:36:04'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/fran/Downloads/macos64/TusLibros.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FK 11/2/2023 18:42:12'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'FK 11/2/2023 18:44:46'!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart |
	cart := Cart acceptingItemsOf: (CartTest itemSellByTheStore).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 18:46:29' prior: 50655774!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart |
	cart := CartTest createCart .! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 18:46:47'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 18:47:20' prior: 50655781!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart |
	cart := CartTest createCart .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 18:47:20' prior: 50655790!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart |
	cart := CartTest createCart .! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FK 11/2/2023 18:50:30'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 18:50:35' prior: 50655796!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart cashier |
	cart := CartTest new createCart.
	cashier := Cashier new.
	self should: [ cashier checkOutFor: cart ]
		raise: Error
		withMessageText: 'Cart can not be empty to do check out'.! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 18:50:40'!
FAILURE!
!Cashier methodsFor: 'nil' stamp: 'FK 11/2/2023 18:52:14'!
checkOutFor: aCart
	(aCart isEmpty) ifTrue: [^self error: self class emptyCartErrorDescription].! !
!Cashier class methodsFor: 'nil' stamp: 'FK 11/2/2023 18:53:14'!
emptyCartErrorDescription
	^'a'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 18:53:36' prior: 50655827!
emptyCartErrorDescription
	^'Cart can not be empty to do check out'.! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 18:53:42'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:00:03'!
test02CheckOutIsPossibleWithCartWithOneBook
	| cart cashier |
	cart := CartTest new createCart.
	cart add: 'validItem'.
	cashier := Cashier new.
	cashier checkOutFor: cart.! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:00:46'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:00:46'!
ERROR!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:00:46'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:01:10' prior: 50655840!
test02CheckOutIsPossibleWithCartWithOneBook
	| cart cashier |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	cashier := Cashier new.
	cashier checkOutFor: cart.! !

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:01:12'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:01:12'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:01:12'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:01:19'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:01:19'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:01:19'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:04:32' prior: 50655859!
test02CheckOutIsPossibleWithCartWithOneBook
	| cart cashier |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	cashier := Cashier new.
	self assert: (cashier checkOutFor: cart) = 'Check Out was succesfull'.! !

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:04:34'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:06:03' prior: 50655821!
checkOutFor: aCart
	(aCart isEmpty) ifTrue: [^self error: self class emptyCartErrorDescription].
	self debit: 10 from: 'cc'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:06:36'!
debit: anAmount from: aCreditCard
	^'Check Out was succesfull'.! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:06:40'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:06:40'!
FAILURE!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:06:40'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:07:30' prior: 50655902!
checkOutFor: aCart
	(aCart isEmpty) ifTrue: [^self error: self class emptyCartErrorDescription].
	^self debit: 10 from: 'cc'.! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:07:33'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:07:33'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:12:17'!
test03CalculateProperDebitForCart
	| cart cashier |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	cashier := Cashier new.
	self should: [ cashier checkOutFor: cart ]
		raise: Error
		withMessageText: 'Cart can not be empty to do check out'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:15:39' prior: 50655939!
test03CalculateProperDebitForCart
	| cart cashier dict |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	cart add: 'validBook'.
	dict := Dictionary new.
	dict add: 'validBook' -> 100.
	cashier := Cashier withPricesList: dict.
	self assert: (cashier calculateDebitFor: cart) = 200.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:16:41'!
withPricesList: aDictionary
	^self new initializeWith: aDictionary.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FK 11/2/2023 19:17:32'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:17:27'!
initializeWith: aDictionary
	priceList := aDictionary.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:18:46'!
calculateDebitFor: aCart
	^aCart xxx: self.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:19:52'!
priceForBook: anISBN
	^priceList at: anISBN.! !
!Cart methodsFor: 'testing' stamp: 'FK 11/2/2023 19:22:40'!
xxx: aCashier
	
	^items inject: 0 into: [ :total :anItem | total + (aCashier priceForBook: anItem)].! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:23:30'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:23:31'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'FK 11/2/2023 19:23:31'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'FK 11/2/2023 19:24:12'!
calculateTotalPriceWith: aCashier
	
	^items inject: 0 into: [ :total :anItem | total + (aCashier priceForBook: anItem)].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:24:13' prior: 50655979!
calculateDebitFor: aCart
	^aCart calculateTotalPriceWith: self.! !

!methodRemoval: Cart #xxx: stamp: 'FK 11/2/2023 19:24:13'!
xxx: aCashier
	
	^items inject: 0 into: [ :total :anItem | total + (aCashier priceForBook: anItem)].!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'FK 11/2/2023 19:25:09'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:25:09'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:25:09'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'FK 11/2/2023 19:25:09'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:39:25'!
test04CheckOutIsNotPossibleWithExpiredCreditCard
	| cart cashier dict |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	cart add: 'validBook'.
	dict := Dictionary new.
	dict add: 'validBook' -> 100.
	cashier := Cashier withPricesList: dict.
	self should: [cashier checkOutFor: cart 
					creditCardNumber: '5400001' 
					creditCardExpirationDate: 052022 
					creditCardOwner: 'Eepy Sanchez']
		raise: Error
		withMessageText: 'Credit Card is expired'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:44:10'!
checkOutFor: aCart creditCardNumber: ccn creditCardExpirationDate: cced creditCardOwner: cco
	| expirationDateAsFGD todayDate |

	expirationDateAsFGD := (FixedGregorianDate yearNumber: (cced mod: 10000) 
										    monthNumber: (cced // 10000) 
										    dayNumber: 1).
	todayDate := (FixedGregorianDate today).
	^expirationDateAsFGD < todayDate.
! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:44:16'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:44:16'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'FK 11/2/2023 19:44:16'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'FK 11/2/2023 19:44:16'!
FAILURE!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'FK 11/2/2023 19:44:16'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:45:53' prior: 50656049!
checkOutFor: aCart creditCardNumber: ccn creditCardExpirationDate: cced creditCardOwner: cco
	(self isCreditCardExpired) ifTrue: [ ^self error: self class creditCardIsExpired ].
! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:46:21'!
creditCardIsExpiredErrorDescription
	^'Credit Card is expired'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:46:38' prior: 50656080!
checkOutFor: aCart creditCardNumber: ccn creditCardExpirationDate: cced creditCardOwner: cco
	(self isCreditCardExpired) ifTrue: [ ^self error: self class creditCardIsExpiredErrorDescription ].
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:47:05'!
isCreditCardExpired: cced
	| expirationDateAsFGD todayDate |

	expirationDateAsFGD := (FixedGregorianDate yearNumber: (cced mod: 10000) 
										    monthNumber: (cced // 10000) 
										    dayNumber: 1).
	todayDate := (FixedGregorianDate today).
	^expirationDateAsFGD < todayDate.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:47:17' prior: 50656094!
checkOutFor: aCart creditCardNumber: ccn creditCardExpirationDate: cced creditCardOwner: cco
	(self isCreditCardExpired: cced) ifTrue: [ ^self error: self class creditCardIsExpiredErrorDescription ].
! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:47:27'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:47:27'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'FK 11/2/2023 19:47:27'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'FK 11/2/2023 19:47:27'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:50:21' prior: 50655888!
test02CheckOutIsPossibleWithCartWithOneBook
	| cart cashier |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	cashier := Cashier new.
	self assert: (cashier checkOutFor: cart 
					creditCardNumber: '5400001' 
					creditCardExpirationDate: 052024 
					creditCardOwner: 'Eepy Sanchez') = 'Check Out was succesfull'.! !

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:50:25'!
FAILURE!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:50:25'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:51:04' prior: 50656115!
checkOutFor: aCart creditCardNumber: ccn creditCardExpirationDate: cced creditCardOwner: cco
	
	(aCart isEmpty) ifTrue: [^self error: self class emptyCartErrorDescription].
	(self isCreditCardExpired: cced) ifTrue: [ ^self error: self class creditCardIsExpiredErrorDescription ].
	^self debit: 10 from: 'cc'.
! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:51:08'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:51:08'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'FK 11/2/2023 19:51:08'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'FK 11/2/2023 19:51:08'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FK 11/2/2023 19:51:43' prior: 50655808!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart cashier |
	cart := CartTest new createCart.
	cashier := Cashier new.
	self should: [ cashier checkOutFor: cart 
					creditCardNumber: '5400001' 
					creditCardExpirationDate: 052024 
					creditCardOwner: 'Eepy Sanchez' ]
		raise: Error
		withMessageText: 'Cart can not be empty to do check out'.! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:51:45'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:51:46'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:51:46'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'FK 11/2/2023 19:51:46'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'FK 11/2/2023 19:51:46'!
PASSED!

!methodRemoval: Cashier #checkOutFor: stamp: 'FK 11/2/2023 19:51:59'!
checkOutFor: aCart
	(aCart isEmpty) ifTrue: [^self error: self class emptyCartErrorDescription].
	^self debit: 10 from: 'cc'.!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'FK 11/2/2023 19:52:20'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'FK 11/2/2023 19:52:20'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'FK 11/2/2023 19:52:20'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'FK 11/2/2023 19:52:20'!
PASSED!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FK 11/2/2023 19:52:46'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FK 11/2/2023 20:02:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'FK 11/2/2023 20:02:00'!
test01ExpiredCreditCard
	| card |
	card := CreditCard number: 540001 expirationDate: 052022 owner: 'Eepy Sánchez'.
	self assert: card isExpired.! !

----QUIT----(3 November 2023 10:37:30) CuisUniversity-5981.image priorSource: 10364737!

----STARTUP---- (5 November 2023 17:51:31) as /Users/fran/Documents/Facultad/Inge1/Cuis Limpio/CuisUniversity-5981.image!


----End fileIn of /Users/fran/Documents/Facultad/Inge1/Cuis Limpio/TusLibros.st----!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:03:18' prior: 50650505!
test01ExpiredCreditCard
	| card |
	card := CreditCard number: '5400112233445566' expirationDate: (May of: 2022) owner: 'Eepy Sánchez'.
	self assert: card isExpired.! !

May of: 2022 class!

(May of: 2022) class!

(May ofYear: 2022) class!

(May ofYear: 2022) class!

Date today class!

Date today!

Date today year!

Date today year < Date yesterday year!

(Date today year) < (Date yesterday year)!

(Date today) < (Date yesterday)!

(May ofYear: 2022) month.!

(Date today) > (Date newDay: 1 month: ((May ofYear: 2022) month) year: ((May ofYear: 2022) year))!

(May ofYear: 2022) year.!

| d |!

d := (May ofYear: 2022).!

(Date today) > (Date newDay: 1 month: (d month) year: (d year))!

| d c |!

d := (May ofYear: 2022).!

c := Date newDay: 1 month: 5 year: 2022.!

c class.!

d monthNumber.!

(Date today) > (Date newDay: 1 month: (d monthNumber) year: (d yearNumber))!

(Date today) > (Date newDay: 1 month: (d monthNumber) year: (d year))!

c := Date newDay: 1 month: 15 year: 2022.!

!testRun: #CreditCardTest #test01ExpiredCreditCard stamp: 'VB 11/5/2023 18:36:55'!
ERROR!
!CreditCard class methodsFor: 'nil' stamp: 'VB 11/5/2023 18:38:09'!
number: ccn expirationDate: cced owner: cco
	^self new initializeWith: ccn expirationDate: cced owner: cco.! !
!CreditCard methodsFor: 'nil' stamp: 'VB 11/5/2023 18:38:56'!
initializeWith: ccn expirationDate: cced owner: cco
	number := ccn.
	expirationDate := cced.
	owner := cco.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:41:57'!
isExpired
	| expDate |
	expDate := Date newDay: 1 month: (expirationDate monthNumber) year: (expirationDate year).
	^expDate < (Date today).! !

!testRun: #CreditCardTest #test01ExpiredCreditCard stamp: 'VB 11/5/2023 18:42:04'!
ERROR!

!testRun: #CreditCardTest #test01ExpiredCreditCard stamp: 'VB 11/5/2023 18:42:04'!
ERROR!

(Date today) > (Date newDay: 1 month: (d monthNumber) year: (d year))!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:44:26' prior: 50650687!
test01ExpiredCreditCard
	| card |
	card := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2022) owner: 'Eepy Sánchez'.
	self assert: card isExpired.! !

!testRun: #CreditCardTest #test01ExpiredCreditCard stamp: 'VB 11/5/2023 18:44:29'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCard stamp: 'VB 11/5/2023 18:44:29'!
PASSED!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:46:26' prior: 50650735!
isExpired
	| ccedAsDate |
	ccedAsDate := Date newDay: 1 month: (expirationDate monthNumber) year: (expirationDate year).
	^ccedAsDate < (Date today).! !

!testRun: #CreditCardTest #test01ExpiredCreditCard stamp: 'VB 11/5/2023 18:46:33'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:49:48'!
test02CreditCardNumberWithLessThan16Characters

	self should: [CreditCard number: '54001122334455' expirationDate: (May ofYear: 2024) owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: 'Credit card number must have exactly 16 digits'.! !

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16Characters stamp: 'VB 11/5/2023 18:49:54'!
FAILURE!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:51:45' prior: 50650723!
number: ccn expirationDate: cced owner: cco
	(ccn size = 16) ifFalse: [self error: self creditCardMustHave16DigitsErrorDescription].
	^self new initializeWith: ccn expirationDate: cced owner: cco.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:51:59'!
creditCardMustHave16DigitsErrorDescription
	^'Credit card number must have exactly 16 digits'.! !

!testRun: #CreditCardTest #test01ExpiredCreditCard stamp: 'VB 11/5/2023 18:52:02'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16Characters stamp: 'VB 11/5/2023 18:52:02'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCard stamp: 'VB 11/5/2023 18:52:07'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16Characters stamp: 'VB 11/5/2023 18:52:07'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:54:01'!
test01ExpiredCreditCardAnswersCorrectly
	| card |
	card := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2022) owner: 'Eepy Sánchez'.
	self assert: card isExpired.! !

!methodRemoval: CreditCardTest #test01ExpiredCreditCard stamp: 'VB 11/5/2023 18:54:01'!
test01ExpiredCreditCard
	| card |
	card := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2022) owner: 'Eepy Sánchez'.
	self assert: card isExpired.!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:54:13'!
test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid

	self should: [CreditCard number: '54001122334455' expirationDate: (May ofYear: 2024) owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: 'Credit card number must have exactly 16 digits'.! !

!methodRemoval: CreditCardTest #test02CreditCardNumberWithLessThan16Characters stamp: 'VB 11/5/2023 18:54:14'!
test02CreditCardNumberWithLessThan16Characters

	self should: [CreditCard number: '54001122334455' expirationDate: (May ofYear: 2024) owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: 'Credit card number must have exactly 16 digits'.!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:55:13'!
test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid

	self should: [CreditCard number: '540011223344556677' expirationDate: (May ofYear: 2024) owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: 'Credit card number must have exactly 16 digits'.! !

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 18:55:14'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 18:55:14'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 18:55:14'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 18:55:14'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:56:40'!
test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid

	self should: [CreditCard number: '5400112233AA556677' expirationDate: (May ofYear: 2024) owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: 'Credit card number must have exactly 16 digits'.! !

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 18:56:42'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 18:56:42'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 18:56:42'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 18:56:42'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 18:56:42'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 18:56:47' prior: 50650886!
test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid

	self should: [CreditCard number: '5400112233AA5566' expirationDate: (May ofYear: 2024) owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: 'Credit card number must have exactly 16 digits'.! !

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 18:56:49'!
FAILURE!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:00:24' prior: 50650792!
number: ccn expirationDate: cced owner: cco
	(ccn size = 16) ifFalse: [self error: self creditCardMustHave16DigitsErrorDescription].
	(ccn allSatisfy: [ :aChar | aChar isDigit ] ) ifFalse: [self error: self creditCardMustHave16DigitsErrorDescription].
	^self new initializeWith: ccn expirationDate: cced owner: cco.! !

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:00:27'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:00:27'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:00:27'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 19:00:27'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 19:00:31'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:00:31'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 19:00:31'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:00:31'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/5/2023 19:00:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/5/2023 19:00:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/5/2023 19:00:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/5/2023 19:00:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/5/2023 19:00:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/5/2023 19:00:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/5/2023 19:00:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/5/2023 19:00:34'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:00:54'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:00:54'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:00:54'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 19:00:54'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:03:37' prior: 50650837!
test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid

	self should: [CreditCard number: '54001122334455' expirationDate: (May ofYear: 2024) owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: (CreditCard creditCardMustHave16DigitsErrorDescription).! !

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:03:38'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:03:38'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:03:38'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:03:38'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 19:03:38'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:03:47'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:03:47'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:03:47'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:03:47'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 19:03:47'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:03:54' prior: 50650859!
test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid

	self should: [CreditCard number: '540011223344556677' expirationDate: (May ofYear: 2024) owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: (CreditCard creditCardMustHave16DigitsErrorDescription).! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:04:02' prior: 50650918!
test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid

	self should: [CreditCard number: '5400112233AA5566' expirationDate: (May ofYear: 2024) owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: (CreditCard creditCardMustHave16DigitsErrorDescription).! !

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 19:04:03'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:04:03'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:04:03'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:04:03'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 19:04:03'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 19:04:08'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:04:08'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:04:08'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:04:08'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 19:04:08'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:06:21'!
test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid

	self should: [CreditCard number: '5400112233445566' 
						expirationDate: (May ofYear: 2024) 
						owner: 'Eepy Tomás Benjamín Juan José Javier Sergio Sánchez'.]
		raise: Error
		withMessageText: (CreditCard creditCardMustHave16DigitsErrorDescription).! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:07:04' prior: 50651134!
test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid

	self should: [CreditCard number: '5400112233445566' 
						expirationDate: (May ofYear: 2024) 
						owner: 'Eepy Tomás Benjamín Juan José Javier Sergio Sánchez'.]
		raise: Error
		withMessageText: (CreditCard creditCardOwnerNameMustHaveAtMost30CharactersErrorDescription).! !

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:07:12'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:08:00' prior: 50650934!
number: ccn expirationDate: cced owner: cco
	(ccn size = 16) ifFalse: [self error: self creditCardMustHave16DigitsErrorDescription].
	(ccn allSatisfy: [ :aChar | aChar isDigit ] ) ifFalse: [self error: self creditCardMustHave16DigitsErrorDescription].
	(cco size > 30) ifTrue: [ self error: self creditCardOwnerNameMustHaveAtMost30CharactersErrorDescription].
	^self new initializeWith: ccn expirationDate: cced owner: cco.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:08:36'!
creditCardOwnerNameMustHaveAtMost30CharactersErrorDescription
	^'Credit Card owner name must have at most 30 characters'.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:08:44' prior: 50651183!
creditCardOwnerNameMustHaveAtMost30CharactersErrorDescription
	^'Credit card owner name must have at most 30 characters'.! !

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:08:47'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:08:47'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:08:47'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 19:08:47'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:08:47'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:12:27'!
test06NotExpiredCreditCardAnswersCorrectly
	| card |
	card := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2099) owner: 'Eepy Sánchez'.
	self deny: card isExpired.! !

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:12:30'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:12:31'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:12:31'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:12:31'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 19:12:31'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:12:31'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:12:31'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:19:12' prior: 50650437!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart cashier creditCard |
	cart := CartTest new createCart.
	cashier := Cashier new.
	creditCard := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2024) owner: 'Eepy Sanchez'.
	self should: [ cashier checkOutFor: cart withCreditCard: creditCard ]
		raise: Error
		withMessageText: 'Cart can not be empty to do check out'.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'VB 11/5/2023 19:20:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'genericCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:20:38' overrides: 16961394!
setUp
	genericCreditCard := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2024) owner: 'Eepy Sanchez'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:21:05' prior: 50651254!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart cashier |
	cart := CartTest new createCart.
	cashier := Cashier new.
	self should: [ cashier checkOutFor: cart withCreditCard: genericCreditCard ]
		raise: Error
		withMessageText: 'Cart can not be empty to do check out'.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'VB 11/5/2023 19:21:24'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:21:24' prior: 50651277 overrides: 16961394!
setUp
	creditCard := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2024) owner: 'Eepy Sanchez'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:21:24' prior: 50651284!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart cashier |
	cart := CartTest new createCart.
	cashier := Cashier new.
	self should: [ cashier checkOutFor: cart withCreditCard: creditCard ]
		raise: Error
		withMessageText: 'Cart can not be empty to do check out'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:23:02'!
checkOutFor: aCart withCreditCard: aCreditCard
	
	(aCart isEmpty) ifTrue: [^self error: self class emptyCartErrorDescription].
	(aCreditCard isExpired) ifTrue: [ ^self error: self class creditCardIsExpiredErrorDescription ].
	^self debit: 10 from: aCreditCard.
! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 19:23:09'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:23:09'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 19:23:09'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:23:09'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:23:36' prior: 50650451!
test02CheckOutIsPossibleWithCartWithOneBook
	| cart cashier |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	cashier := Cashier new.
	self assert: (cashier checkOutFor: cart withCreditCard: creditCard) = 'Check Out was succesfull'.! !

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:23:38'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 19:23:38'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:23:38'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 19:23:38'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:23:38'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:28:06' prior: 50650476!
test04CheckOutIsNotPossibleWithExpiredCreditCard
	| cart cashier dict expiredCreditCard |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	cart add: 'validBook'.
	dict := Dictionary new.
	dict add: 'validBook' -> 100.
	cashier := Cashier withPricesList: dict.
	expiredCreditCard := CreditCard number: '5400112233445566' 
								expirationDate: (May ofYear: 2022) 
								owner: 'Eepy Sanchez'.
	self should: [cashier checkOutFor: cart withCreditCard: expiredCreditCard ]
		raise: Error
		withMessageText: 'Credit Card is expired'.! !

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:28:09'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 19:28:09'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:28:09'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 19:28:09'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:28:09'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:29:38' prior: 50651375!
test04CheckOutIsNotPossibleWithExpiredCreditCard
	| cart cashier dict |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	cart add: 'validBook'.
	dict := Dictionary new.
	dict add: 'validBook' -> 100.
	cashier := Cashier withPricesList: dict.
	self should: [cashier checkOutFor: cart withCreditCard: creditCard ]
		raise: Error
		withMessageText: 'Credit Card is expired'.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'VB 11/5/2023 19:30:21'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'creditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:30:19' prior: 50651304 overrides: 16961394!
setUp
	creditCard := CreditCard number: '5400112233445566' 
						   expirationDate: (May ofYear: 2024) 
						   owner: 'Eepy Sanchez'.
	expiredCreditCard := CreditCard number: '5400112233445566' 
								   expirationDate: (May ofYear: 2022) 
								   owner: 'Eepy Sanchez'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:30:32' prior: 50651412!
test04CheckOutIsNotPossibleWithExpiredCreditCard
	| cart cashier dict |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	cart add: 'validBook'.
	dict := Dictionary new.
	dict add: 'validBook' -> 100.
	cashier := Cashier withPricesList: dict.
	self should: [cashier checkOutFor: cart withCreditCard: expiredCreditCard ]
		raise: Error
		withMessageText: 'Credit Card is expired'.! !

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:30:35'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 19:30:35'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:30:35'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 19:30:35'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:30:35'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'VB 11/5/2023 19:31:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:31:09' prior: 50651436 overrides: 16961394!
setUp
	validCreditCard := CreditCard number: '5400112233445566' 
						   expirationDate: (May ofYear: 2024) 
						   owner: 'Eepy Sanchez'.
	expiredCreditCard := CreditCard number: '5400112233445566' 
								   expirationDate: (May ofYear: 2022) 
								   owner: 'Eepy Sanchez'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:31:09' prior: 50651347!
test02CheckOutIsPossibleWithCartWithOneBook
	| cart cashier |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	cashier := Cashier new.
	self assert: (cashier checkOutFor: cart withCreditCard: validCreditCard) = 'Check Out was succesfull'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:31:09' prior: 50651311!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart cashier |
	cart := CartTest new createCart.
	cashier := Cashier new.
	self should: [ cashier checkOutFor: cart withCreditCard: validCreditCard ]
		raise: Error
		withMessageText: 'Cart can not be empty to do check out'.! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 19:31:12'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:31:12'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 19:31:12'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:31:12'!
PASSED!

!methodRemoval: Cashier #checkOutFor:creditCardNumber:creditCardExpirationDate:creditCardOwner: stamp: 'VB 11/5/2023 19:35:03'!
checkOutFor: aCart creditCardNumber: ccn creditCardExpirationDate: cced creditCardOwner: cco
	
	(aCart isEmpty) ifTrue: [^self error: self class emptyCartErrorDescription].
	(self isCreditCardExpired: cced) ifTrue: [ ^self error: self class creditCardIsExpiredErrorDescription ].
	^self debit: 10 from: 'cc'.
!

!methodRemoval: Cashier #isCreditCardExpired: stamp: 'VB 11/5/2023 19:35:10'!
isCreditCardExpired: cced
	| expirationDateAsFGD todayDate |

	expirationDateAsFGD := (FixedGregorianDate yearNumber: (cced mod: 10000) 
										    monthNumber: (cced // 10000) 
										    dayNumber: 1).
	todayDate := (FixedGregorianDate today).
	^expirationDateAsFGD < todayDate.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:37:14' prior: 50651322!
checkOutFor: aCart withCreditCard: aCreditCard
	
	(aCart isEmpty) ifTrue: [^self error: self class emptyCartErrorDescription].
	(aCreditCard isExpired) ifTrue: [ ^self error: self class creditCardIsExpiredErrorDescription ].
	^self debit: (self calculateDebitFor: aCart) from: aCreditCard.
! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 19:37:20'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:37:20'!
ERROR!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 19:37:20'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:37:20'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:37:20'!
ERROR!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 19:37:30'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:37:33'!
ERROR!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:37:33'!
ERROR!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 19:37:39'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:37:41'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:40:12'!
ERROR!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:40:12'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 19:41:37' prior: 50651501!
test02CheckOutIsPossibleWithCartWithOneBook
	| cart cashier dict |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	dict := Dictionary new.
	dict add: 'validBook' -> 100.
	cashier := Cashier withPricesList: dict.
	self assert: (cashier checkOutFor: cart withCreditCard: validCreditCard) = 'Check Out was succesfull'.! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 19:41:39'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:41:39'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 19:41:39'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:41:39'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/5/2023 19:41:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/5/2023 19:41:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/5/2023 19:41:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/5/2023 19:41:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/5/2023 19:41:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/5/2023 19:41:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/5/2023 19:41:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/5/2023 19:41:58'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 19:42:01'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 19:42:01'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 19:42:01'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 19:42:01'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:42:03'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:42:03'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:42:03'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 19:42:03'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/5/2023 19:42:03'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 19:42:03'!
PASSED!

Object subclass: #TestableMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestableMerchantProcessor category: 'TusLibros' stamp: 'VB 11/5/2023 20:04:16'!
Object subclass: #TestableMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #FakeMerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FakeMerchantProcessorTest category: 'TusLibros' stamp: 'VB 11/5/2023 20:04:36'!
Object subclass: #FakeMerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #FakeMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FakeMerchantProcessor category: 'TusLibros' stamp: 'VB 11/5/2023 20:04:40'!
Object subclass: #FakeMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TestableMerchantProcessor stamp: 'VB 11/5/2023 20:04:49'!
Object subclass: #TestableMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FakeMerchantProcessorTest methodsFor: 'nil' stamp: 'VB 11/5/2023 20:16:42'!
test01CanNotDebitANonPositiveAmount
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2025) owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self should: [ merchantProcessor debit: 0 from: creditCard ]
		raise: Error
		withMessageText: FakeMerchantProcessor canNotDebitANonPositiveAmountErrorDescription.! !

5 strictlyPositive !

0 strictlyPositive !
!FakeMerchantProcessor methodsFor: 'nil' stamp: 'VB 11/5/2023 20:18:59'!
debit: anAmount from: aCreditCard
	(anAmount strictlyPositive) ifFalse: [self error: self class canNotDebitANonPositiveAmountErrorDescription].! !
!FakeMerchantProcessor class methodsFor: 'nil' stamp: 'VB 11/5/2023 20:19:42'!
canNotDebitANonPositiveAmountErrorDescription
	^'The amount to debit must be strictly positive'.! !

TestCase subclass: #FakeMerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FakeMerchantProcessorTest category: 'TusLibros' stamp: 'VB 11/5/2023 20:20:00'!
TestCase subclass: #FakeMerchantProcessorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 20:20:03'!
PASSED!
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:42:33'!
test01CanNotDebitFromAStolenCard
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445569' expirationDate: (May ofYear: 2025) owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self should: [ merchantProcessor debit: 100 from: creditCard ]
		raise: Error
		withMessageText: FakeMerchantProcessor stolenCreditCardErrorDescription.! !
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:42:45'!
test02CanNotDebitFromAStolenCard
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445569' expirationDate: (May ofYear: 2025) owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self should: [ merchantProcessor debit: 100 from: creditCard ]
		raise: Error
		withMessageText: FakeMerchantProcessor stolenCreditCardErrorDescription.! !

!methodRemoval: FakeMerchantProcessorTest #test01CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 20:42:45'!
test01CanNotDebitFromAStolenCard
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445569' expirationDate: (May ofYear: 2025) owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self should: [ merchantProcessor debit: 100 from: creditCard ]
		raise: Error
		withMessageText: FakeMerchantProcessor stolenCreditCardErrorDescription.!
!FakeMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:44:59' prior: 50651763!
debit: anAmount from: aCreditCard
	(anAmount strictlyPositive) ifFalse: [self error: self class canNotDebitANonPositiveAmountErrorDescription].
	(aCreditCard cardNumber = '5400112233445569') ifTrue: [self error: self class stolenCreditCardErrorDescription].! !
!FakeMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:45:52'!
stolenCreditCardErrorDescription
	^'Stolen credit card'.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:46:12'!
cardNumber
	^number.! !

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 20:46:17'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 20:46:17'!
PASSED!
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:50:27'!
test03CanNotDebitFromACardWithoutCredit
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445599' expirationDate: (May ofYear: 2025) owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self should: [ merchantProcessor debit: 100 from: creditCard ]
		raise: Error
		withMessageText: FakeMerchantProcessor creditCardWithoutCreditErrorDescription.! !
!FakeMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:51:06' prior: 50651839!
debit: anAmount from: aCreditCard
	(anAmount strictlyPositive) ifFalse: [self error: self class canNotDebitANonPositiveAmountErrorDescription].
	(aCreditCard cardNumber = '5400112233445569') ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(aCreditCard cardNumber = '5400112233445599') ifTrue: [self error: self creditCardWithoutCreditErrorDescription].! !
!FakeMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:51:55'!
creditCardWithoutCreditErrorDescription
	^'This credit card does not have enough credit'.! !

!methodRemoval: FakeMerchantProcessor #creditCardWithoutCreditErrorDescription stamp: 'VB 11/5/2023 20:52:06'!
creditCardWithoutCreditErrorDescription
	^'This credit card does not have enough credit'.!
!FakeMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:52:13'!
creditCardWithoutCreditErrorDescription
	^'This credit card does not have enough credit'.! !

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 20:52:17'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 20:52:17'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 20:52:17'!
FAILURE!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 20:52:17'!
FAILURE!
!FakeMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:53:05' prior: 50651883!
debit: anAmount from: aCreditCard
	(anAmount strictlyPositive) ifFalse: [self error: self class canNotDebitANonPositiveAmountErrorDescription].
	(aCreditCard cardNumber = '5400112233445569') 
					ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(aCreditCard cardNumber = '5400112233445599') 
					ifTrue: [self error: self class creditCardWithoutCreditErrorDescription].! !

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 20:53:08'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 20:53:08'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 20:53:08'!
PASSED!
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:54:03' prior: 50651867!
test03CanNotDebitFromACardWithoutCredit
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2025) owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self assert: [ merchantProcessor debit: 100 from: creditCard ] = 'transaction_id'.! !

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 20:54:08'!
FAILURE!
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:54:27' prior: 50651959!
test03CanNotDebitFromACardWithoutCredit
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2025) owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self assert: (merchantProcessor debit: 100 from: creditCard = 'transaction_id').! !

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 20:54:34'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 20:54:34'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 20:54:34'!
ERROR!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 20:54:34'!
ERROR!
!FakeMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:54:53' prior: 50651932!
debit: anAmount from: aCreditCard
	(anAmount strictlyPositive) ifFalse: [self error: self class canNotDebitANonPositiveAmountErrorDescription].
	(aCreditCard cardNumber = '5400112233445569') 
					ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(aCreditCard cardNumber = '5400112233445599') 
					ifTrue: [self error: self class creditCardWithoutCreditErrorDescription].
	^'transaction_id'.! !

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 20:55:10'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 20:55:10'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 20:55:10'!
ERROR!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 20:55:10'!
ERROR!
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:50:27' prior: 50651977!
test03CanNotDebitFromACardWithoutCredit
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445599' expirationDate: (May ofYear: 2025) owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self should: [ merchantProcessor debit: 100 from: creditCard ]
		raise: Error
		withMessageText: FakeMerchantProcessor creditCardWithoutCreditErrorDescription.! !
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:56:51'!
test04ValidCreditCardCanBuy
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2025) owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self assert: (merchantProcessor debit: 100 from: creditCard = 'transaction_id').! !

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 20:57:44'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 20:57:46'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 20:57:48'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/5/2023 20:57:51'!
ERROR!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/5/2023 20:57:51'!
ERROR!
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 20:58:09' prior: 50652052!
test04ValidCreditCardCanBuy
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445566' expirationDate: (May ofYear: 2025) owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self assert: ((merchantProcessor debit: 100 from: creditCard) = 'transaction_id').! !

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/5/2023 20:58:11'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 20:58:11'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 20:58:11'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 20:58:11'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/5/2023 20:58:11'!
PASSED!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'VB 11/5/2023 21:02:41'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 21:02:39' prior: 50650627!
initializeWith: aDictionary
	priceList := aDictionary.
	merchantProcessor := FakeMerchantProcessor new.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 21:03:31' prior: 50651562!
checkOutFor: aCart withCreditCard: aCreditCard
	
	(aCart isEmpty) ifTrue: [^self error: self class emptyCartErrorDescription].
	(aCreditCard isExpired) ifTrue: [ ^self error: self class creditCardIsExpiredErrorDescription ].
	^merchantProcessor debit: (self calculateDebitFor: aCart) from: aCreditCard.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/5/2023 21:03:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/5/2023 21:03:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/5/2023 21:03:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/5/2023 21:03:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/5/2023 21:03:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/5/2023 21:03:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/5/2023 21:03:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/5/2023 21:03:54'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 21:03:57'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 21:03:57'!
FAILURE!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 21:03:57'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 21:03:57'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 21:03:57'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/5/2023 21:04:09' prior: 50651615!
test02CheckOutIsPossibleWithCartWithOneBook
	| cart cashier dict |
	cart := CartTest new createCart.
	cart add: 'validBook'.
	dict := Dictionary new.
	dict add: 'validBook' -> 100.
	cashier := Cashier withPricesList: dict.
	self assert: (cashier checkOutFor: cart withCreditCard: validCreditCard) = 'transaction_id'.! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 21:04:14'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 21:04:14'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 21:04:14'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 21:04:14'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 21:04:18'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:04:18'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:04:18'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 21:04:18'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:04:18'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 21:04:18'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 21:04:20'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 21:04:20'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 21:04:20'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/5/2023 21:04:20'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/5/2023 21:04:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/5/2023 21:04:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/5/2023 21:04:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/5/2023 21:04:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/5/2023 21:04:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/5/2023 21:04:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/5/2023 21:04:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/5/2023 21:04:23'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 21:04:25'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 21:04:25'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 21:04:25'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 21:04:25'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 21:04:28'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:04:28'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:04:28'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 21:04:28'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:04:28'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 21:04:28'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 21:04:30'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 21:04:30'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 21:04:30'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/5/2023 21:04:30'!
PASSED!

!methodRemoval: Cashier #debit:from: stamp: 'VB 11/5/2023 21:04:38'!
debit: anAmount from: aCreditCard
	^'Check Out was succesfull'.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/5/2023 21:05:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/5/2023 21:05:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/5/2023 21:05:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/5/2023 21:05:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/5/2023 21:05:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/5/2023 21:05:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/5/2023 21:05:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/5/2023 21:05:00'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 21:05:03'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 21:05:03'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 21:05:03'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 21:05:03'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 21:05:05'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:05:05'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:05:05'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 21:05:05'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:05:05'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 21:05:05'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 21:05:07'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 21:05:07'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 21:05:07'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/5/2023 21:05:07'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/5/2023 21:05:13'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/5/2023 21:06:14'!
PASSED!

----SNAPSHOT----(5 November 2023 21:06:18) CuisUniversity-5981.image priorSource: 10197292!

----SNAPSHOT----(5 November 2023 21:06:21) CuisUniversity-5981.image priorSource: 10268968!

----SNAPSHOT----(5 November 2023 21:06:42) CuisUniversity-5981.image priorSource: 10269061!

----SNAPSHOT----(5 November 2023 21:06:44) CuisUniversity-5981.image priorSource: 10269154!

----QUIT----(5 November 2023 21:07:59) CuisUniversity-5981.image priorSource: 10269247!

----STARTUP---- (8 November 2023 22:27:18) as /Users/fran/Documents/Facultad/Inge1/Cuis Limpio/CuisUniversity-5981.image!


Object subclass: #Interface
	instanceVariableNames: 'clients currentCarts catalog lastCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'VB 11/8/2023 22:30:47'!
Object subclass: #Interface
	instanceVariableNames: 'clients currentCarts catalog lastCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface class methodsFor: 'nil' stamp: 'VB 11/8/2023 22:31:03'!
invalidClientOrPasswordErrorDescription
	^'The client id or password is not valid.'	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:31:17'!
notACartIdErrorDescription
	^'Unknown cartId.'	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:31:27'!
withClients: aClientDictionary andCatalog: aCatalog
	^self new initializeWith: aClientDictionary andCatalog: aCatalog.! !
!Interface methodsFor: 'nil' stamp: 'VB 11/8/2023 22:31:46'!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	currentCarts := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:31:56'!
listCart: aCartId
	| cart |
	cart := currentCarts at: aCartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	^ (catalog keys) inject: ''
			into: [:stringList :anIsbn | ((cart occurrencesOf: anIsbn) = 0) 
								ifFalse: [stringList, anIsbn , '|', (cart occurrencesOf: anIsbn) asString, '|']
								ifTrue: [stringList]. 
		 		].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:32:08'!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:32:18'!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:32:42'!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	cart := currentCarts
		 	at: aCartId
		 	ifAbsent: [^self error: self class notACartIdErrorDescription].

	cart add: aQuantity of: anIsbn.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:33:40' prior: 50652651!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	cart := currentCarts
		 	at: aCartId
		 	ifAbsent: [^self error: self class notACartIdErrorDescription].

	cart add: aQuantity withOccurrences: anIsbn.! !

TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'VB 11/8/2023 22:34:23'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'VB 11/8/2023 22:35:17'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'VB 11/8/2023 22:35:37'!
anotherItemSellByTheStore
	
	^ 'validBook2'! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'VB 11/8/2023 22:36:06'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:36:17'!
defaultCatalog
	
	| catalog |
	catalog := Dictionary new.
	catalog at: self itemSellByTheStore put: self itemSellByTheStorePrice.
	catalog 	at: self anotherItemSellByTheStore put: self itemSellByTheStorePrice.
	^catalog. ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:36:32'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:36:39'!
itemSellByTheStore
	
	^ 'validBook'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:36:46'!
itemSellByTheStorePrice
	
	^10! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/8/2023 22:37:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/8/2023 22:37:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/8/2023 22:37:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/8/2023 22:37:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/8/2023 22:37:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/8/2023 22:37:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/8/2023 22:37:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/8/2023 22:37:02'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/8/2023 22:37:05'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/8/2023 22:37:05'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/8/2023 22:37:05'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/8/2023 22:37:05'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 22:37:07'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 22:37:07'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 22:37:07'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/8/2023 22:37:07'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/8/2023 22:37:07'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 22:37:08'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/8/2023 22:37:10'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/8/2023 22:37:10'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/8/2023 22:37:10'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/8/2023 22:37:10'!
PASSED!
!InterfaceTest methodsFor: 'nil' stamp: 'VB 11/8/2023 22:37:37' overrides: 16961394!
setUp
	testObjectsFactory := (StoreTestObjectsFactory new).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:37:45'!
test01CreateCartWithNonRegisteredClientIdShouldFail
	| interface clientId password |
	interface := Interface withClients: (Dictionary new) andCatalog: (testObjectsFactory defaultCatalog).
	clientId := 'pepito97'.
	password := 'password'.
	
	self   should: [interface createCartFor: clientId withPass: password] 
		raise: Error 
		withMessageText: (Interface invalidClientOrPasswordErrorDescription).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:37:54'!
test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail
	| interface clientId password clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := (Dictionary new).
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: (clientPasswordDict) andCatalog: (testObjectsFactory defaultCatalog).
	self   should: [interface createCartFor: clientId withPass: 'passwor'] 
		raise: Error 
		withMessageText: (Interface invalidClientOrPasswordErrorDescription).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:38:00'!
test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart
	| interface clientId password clientPasswordDict cartId |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	self shouldnt: [interface listCart: cartId] raise: Error.
	.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:38:08'!
test04AddToCartWithInvalidCartIdShouldFail
	| interface clientPasswordDict |
	
	clientPasswordDict := Dictionary new.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	
	self  should: [interface addToCart: 'notACartID' 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1] 
		raise: Error
		withMessageText: Interface notACartIdErrorDescription.
	.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:38:14'!
test05ListCartWithInvalidCartIdShouldFail
	| interface clientPasswordDict |
	
	clientPasswordDict := Dictionary new.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	
	self  should: [interface listCart: 'notACartID' ] 
		raise: Error
		withMessageText: Interface notACartIdErrorDescription.
	.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:38:21'!
test06ListCartWithValidCartIdListsCartISBN
	| interface clientId password clientPasswordDict cartId actualText |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	actualText := (interface listCart: cartId ).
	
	self  assert: actualText = 'validBook|1|'.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:38:32'!
test07ListCartWithValidCartIdListsCartISBNSeveralBooks
	| interface clientId password clientPasswordDict cartId actualText |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory anotherItemSellByTheStore 
			bookQuantity: 3.
	actualText := (interface listCart: cartId ).
	
	self  assert: actualText = 'validBook|1|validBook2|3|'.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:38:39'!
test08AddToCartWithValidCartIdShouldntFail
	| interface clientId password clientPasswordDict cartId |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	
	self shouldnt: [ interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1. ]
		raise: Error.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:38:50'!
test09CheckoutFailsWithUnknownCartId
	| interface clientId password clientPasswordDict cartId |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := 'iDoNotExist'.
	
	self should: [ 
		interface 
			checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (testObjectsFactory todayPastYear) 
			andOwner:  'Eepy sanchez'.
		]
		raise: Error
		withMessageText: (Interface notACartIdErrorDescription).! !

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/8/2023 22:38:57'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/8/2023 22:38:57'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/8/2023 22:38:57'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 22:38:57'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 22:38:57'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 22:38:57'!
ERROR!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/8/2023 22:38:57'!
ERROR!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/8/2023 22:38:57'!
FAILURE!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 22:38:57'!
FAILURE!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/8/2023 22:39:18'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/8/2023 22:39:21'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/8/2023 22:39:23'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 22:39:25'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 22:39:27'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 22:39:29'!
ERROR!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 22:39:29'!
ERROR!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 22:40:26'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 22:40:48'!
ERROR!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 22:40:48'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:41:40' prior: 50652661!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	cart := currentCarts
		 	at: aCartId
		 	ifAbsent: [^self error: self class notACartIdErrorDescription].

	cart add: anIsbn withOccurrences: aQuantity.! !

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/8/2023 22:41:45'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/8/2023 22:41:45'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/8/2023 22:41:45'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 22:41:45'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 22:41:45'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 22:41:45'!
ERROR!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/8/2023 22:41:45'!
ERROR!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/8/2023 22:41:45'!
FAILURE!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 22:41:45'!
FAILURE!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 22:41:51'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 22:41:53'!
ERROR!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 22:41:53'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 22:44:07' prior: 50653055!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	cart := currentCarts
		 	at: aCartId
		 	ifAbsent: [^self error: self class notACartIdErrorDescription].

	cart add: anIsbn withOcurrences: aQuantity.! !

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/8/2023 22:44:11'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/8/2023 22:44:11'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/8/2023 22:44:11'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 22:44:11'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 22:44:11'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 22:44:11'!
ERROR!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/8/2023 22:44:11'!
ERROR!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/8/2023 22:44:11'!
FAILURE!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 22:44:11'!
FAILURE!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 22:44:18'!
ERROR!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 22:44:18'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'VB 11/8/2023 22:46:45' prior: 50650533!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/8/2023 22:46:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/8/2023 22:46:52'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/8/2023 22:46:52'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/8/2023 22:46:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/8/2023 22:46:52'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/8/2023 22:46:52'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/8/2023 22:46:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/8/2023 22:46:52'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'VB 11/8/2023 23:05:39' prior: 50653159!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/8/2023 23:05:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/8/2023 23:05:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/8/2023 23:05:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/8/2023 23:05:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/8/2023 23:05:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/8/2023 23:05:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/8/2023 23:05:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/8/2023 23:05:43'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/8/2023 23:05:46'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/8/2023 23:05:46'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/8/2023 23:05:46'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/8/2023 23:05:46'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 23:05:49'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:05:49'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:05:49'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/8/2023 23:05:49'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:05:49'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 23:05:49'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/8/2023 23:05:51'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/8/2023 23:05:51'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/8/2023 23:05:51'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/8/2023 23:05:51'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:06:59' prior: 50651512!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart cashier |
	cart := CartTest new createCart.
	cashier := Cashier new.
	self should: [ cashier checkOutFor: cart withCreditCard: validCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/8/2023 23:07:00'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/8/2023 23:07:01'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/8/2023 23:07:01'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/8/2023 23:07:01'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/8/2023 23:07:01'!
PASSED!

TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'VB 11/8/2023 23:08:52'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'support' stamp: 'VB 11/8/2023 23:09:12' overrides: 16961394!
setUp
	testObjectsFactory := (StoreTestObjectsFactory new).! !
!CartTest methodsFor: 'tests' stamp: 'VB 11/8/2023 23:09:59' prior: 50650333!
test01NewCartsAreCreatedEmpty

	self assert: testObjectsFactory createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'VB 11/8/2023 23:10:37' prior: 50650338!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'VB 11/8/2023 23:10:47' prior: 50650351!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'VB 11/8/2023 23:11:02' prior: 50650358!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: testObjectsFactory itemSellByTheStore withOcurrences: 0  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'VB 11/8/2023 23:11:10' prior: 50650371!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add:  testObjectsFactory itemNotSellByTheStore withOcurrences: 2  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'VB 11/8/2023 23:11:18' prior: 50650384!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'VB 11/8/2023 23:11:25' prior: 50650392!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self deny: (cart includes: testObjectsFactory itemSellByTheStore)! !

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/8/2023 23:11:27'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/8/2023 23:11:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/8/2023 23:11:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/8/2023 23:11:27'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/8/2023 23:11:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/8/2023 23:11:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/8/2023 23:11:27'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/8/2023 23:11:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/8/2023 23:11:27'!
PASSED!
!Cart methodsFor: 'assertions' stamp: 'VB 11/8/2023 23:11:42' prior: 50653191!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/8/2023 23:11:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/8/2023 23:11:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/8/2023 23:11:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/8/2023 23:11:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/8/2023 23:11:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/8/2023 23:11:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/8/2023 23:11:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/8/2023 23:11:45'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/8/2023 23:11:45'!
ERROR!

!methodRemoval: CartTest #createCart stamp: 'VB 11/8/2023 23:12:46'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'VB 11/8/2023 23:12:52'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'VB 11/8/2023 23:12:58'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'VB 11/8/2023 23:13:02'!
itemNotSellByTheStore
	
	^'invalidBook'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/8/2023 23:13:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/8/2023 23:13:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/8/2023 23:13:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/8/2023 23:13:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/8/2023 23:14:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/8/2023 23:14:28'!
PASSED!
!Cart methodsFor: 'testing' stamp: 'VB 11/8/2023 23:14:50' prior: 50650562!
includes: anItem

	^items includesKey: anItem ! !
!Cart methodsFor: 'testing' stamp: 'VB 11/8/2023 23:14:57' prior: 50653491!
includes: anItem

	^items includes: anItem ! !

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/8/2023 23:16:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/8/2023 23:16:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/8/2023 23:16:14'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'VB 11/8/2023 23:16:29' prior: 50650399!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore withOcurrences: 2.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/8/2023 23:16:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/8/2023 23:16:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/8/2023 23:16:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/8/2023 23:16:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/8/2023 23:16:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/8/2023 23:16:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/8/2023 23:16:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/8/2023 23:16:34'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'VB 11/8/2023 23:17:31'!
add: anItem withOccurrences: aQuantity

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity .
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:17:31' prior: 50653509!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:17:31' prior: 50653362!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add:  testObjectsFactory itemNotSellByTheStore withOccurrences: 2  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:17:31' prior: 50653109!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	cart := currentCarts
		 	at: aCartId
		 	ifAbsent: [^self error: self class notACartIdErrorDescription].

	cart add: anIsbn withOccurrences: aQuantity.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:17:31' prior: 50653348!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: testObjectsFactory itemSellByTheStore withOccurrences: 0  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:17:31' prior: 50650569!
add: anItem

	^ self add: anItem withOccurrences: 1 ! !

!methodRemoval: Cart #add:withOcurrences: stamp: 'VB 11/8/2023 23:17:31'!
add: anItem withOcurrences: aQuantity

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity .
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/8/2023 23:17:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/8/2023 23:17:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/8/2023 23:17:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/8/2023 23:17:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/8/2023 23:17:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/8/2023 23:17:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/8/2023 23:17:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/8/2023 23:17:36'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/8/2023 23:17:39'!
ERROR!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/8/2023 23:17:39'!
ERROR!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/8/2023 23:17:39'!
ERROR!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/8/2023 23:17:39'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:18:19' prior: 50651489 overrides: 16961394!
setUp
	validCreditCard := CreditCard number: '5400112233445566' 
						   	expirationDate: (May ofYear: 2024) 
						   	owner: 'Eepy Sanchez'.
	expiredCreditCard := CreditCard number: '5400112233445566' 
							expirationDate: (May ofYear: 2022) 
							owner: 'Eepy Sanchez'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:19:37' prior: 50653655 overrides: 16961394!
setUp
	validCreditCard := CreditCard number: '5400112233445566' 
						   	expirationDate: (May ofYear: (Date today year + 1))
						   	owner: 'Eepy Sanchez'.
	expiredCreditCard := CreditCard number: '5400112233445566' 
							expirationDate: (May ofYear: (Date today year - 1)) 
							owner: 'Eepy Sanchez'.! !

Date today year.!

Date today year-1!

(Date today year)-1!

(Date today yearNumber)!

(Date today yearNumber)-1!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:20:40' prior: 50653668 overrides: 16961394!
setUp
	validCreditCard := CreditCard number: '5400112233445566' 
						   	expirationDate: (May ofYear: (Date today yearNumber + 1))
						   	owner: 'Eepy Sanchez'.
	expiredCreditCard := CreditCard number: '5400112233445566' 
							expirationDate: (May ofYear: (Date today yearNumber - 1)) 
							owner: 'Eepy Sanchez'.! !

May ofYear: (Date today yearNumber)-1.!

May ofYear: (Date today yearNumber)+1.!

TestCase subclass: #CashierTest
	instanceVariableNames: 'validCreditCard expiredCreditCard testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'VB 11/8/2023 23:22:16'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'validCreditCard expiredCreditCard testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:22:59' prior: 50653685 overrides: 16961394!
setUp
	testObjectsFactory := (StoreTestObjectsFactory new).
	validCreditCard := CreditCard number: '5400112233445566' 
						   	expirationDate: (May ofYear: (Date today yearNumber + 1))
						   	owner: 'Eepy Sanchez'.
	expiredCreditCard := CreditCard number: '5400112233445566' 
							expirationDate: (May ofYear: (Date today yearNumber - 1)) 
							owner: 'Eepy Sanchez'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:23:28' prior: 50653274!
test01CheckOutIsNotPossibleIfEmptyCart
	| cart cashier |
	cart := testObjectsFactory createCart.
	cashier := Cashier new.
	self should: [ cashier checkOutFor: cart withCreditCard: validCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.! !

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/8/2023 23:23:31'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:24:40' prior: 50652183!
test02CheckOutIsPossibleWithCartWithOneBook
	| cart cashier |
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cashier := Cashier withPricesList: testObjectsFactory defaultCatalog.
	self assert: (cashier checkOutFor: cart withCreditCard: validCreditCard) = 'transaction_id'.! !

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/8/2023 23:24:42'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:25:25' prior: 50650464!
test03CalculateProperDebitForCart
	| cart cashier |
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore .
	cart add: testObjectsFactory itemSellByTheStore .
	cashier := Cashier withPricesList: testObjectsFactory defaultCatalog.
	self assert: (cashier calculateDebitFor: cart) = 20.! !

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/8/2023 23:25:28'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:26:55' prior: 50651448!
test04CheckOutIsNotPossibleWithExpiredCreditCard
	| cart cashier |
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	cashier := Cashier withPricesList: testObjectsFactory defaultCatalog.
	self should: [cashier checkOutFor: cart withCreditCard: expiredCreditCard ]
		raise: Error
		withMessageText: 'Credit Card is expired'.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:27:07' prior: 50653780!
test04CheckOutIsNotPossibleWithExpiredCreditCard
	| cart cashier |
	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	cart add: testObjectsFactory itemSellByTheStore.
	cashier := Cashier withPricesList: testObjectsFactory defaultCatalog.
	self should: [cashier checkOutFor: cart withCreditCard: expiredCreditCard ]
		raise: Error
		withMessageText: Cashier creditCardIsExpiredErrorDescription.! !

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/8/2023 23:27:09'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/8/2023 23:27:12'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/8/2023 23:27:12'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/8/2023 23:27:12'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/8/2023 23:27:12'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/8/2023 23:27:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/8/2023 23:27:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/8/2023 23:27:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/8/2023 23:27:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/8/2023 23:27:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/8/2023 23:27:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/8/2023 23:27:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/8/2023 23:27:15'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/8/2023 23:27:17'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/8/2023 23:27:17'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/8/2023 23:27:17'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/8/2023 23:27:17'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 23:27:38'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 23:27:38'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:27:38'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:27:38'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/8/2023 23:27:38'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:27:38'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 23:27:38'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:28:15' prior: 50650820!
test01ExpiredCreditCardAnswersCorrectly
	| card |
	card := CreditCard number: '5400112233445566' 
					expirationDate: (May ofYear: (Date today yearNumber - 1)) 
					owner: 'Eepy Sánchez'.
	self assert: card isExpired.! !

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 23:28:18'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:28:57' prior: 50651018!
test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid

	self should: [CreditCard number: '54001122334455' 
						expirationDate: (May ofYear: (Date today yearNumber + 1))
						owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: (CreditCard creditCardMustHave16DigitsErrorDescription).! !

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:29:14'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 23:29:16'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:29:50' prior: 50651070!
test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid

	self should: [CreditCard number: '540011223344556677' 
						expirationDate: (May ofYear: (Date today yearNumber + 1)) 
						owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: (CreditCard creditCardMustHave16DigitsErrorDescription).! !

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:30:00'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:30:28' prior: 50651082!
test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid

	self should: [CreditCard number: '5400112233AA5566' 
						expirationDate: (May ofYear: (Date today yearNumber + 1)) 
						owner: 'Eepy Sánchez'.]
		raise: Error
		withMessageText: (CreditCard creditCardMustHave16DigitsErrorDescription).! !

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/8/2023 23:30:32'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:30:52' prior: 50651148!
test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid

	self should: [CreditCard number: '5400112233445566' 
						expirationDate: (May ofYear: (Date today yearNumber + 1)) 
						owner: 'Eepy Tomás Benjamín Juan José Javier Sergio Sánchez'.]
		raise: Error
		withMessageText: (CreditCard creditCardOwnerNameMustHaveAtMost30CharactersErrorDescription).! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:31:14' prior: 50651218!
test06NotExpiredCreditCardAnswersCorrectly
	| card |
	card := CreditCard number: '5400112233445566' 
					expirationDate: (May ofYear: (Date today yearNumber + 1)) 
					owner: 'Eepy Sánchez'.
	self deny: card isExpired.! !

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 23:31:18'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:31:18'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:31:18'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/8/2023 23:31:18'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:31:18'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 23:31:18'!
PASSED!
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:31:48' prior: 50651746!
test01CanNotDebitANonPositiveAmount
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445566' 
						expirationDate: (May ofYear: (Date today yearNumber + 1)) 
						owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self should: [ merchantProcessor debit: 0 from: creditCard ]
		raise: Error
		withMessageText: FakeMerchantProcessor canNotDebitANonPositiveAmountErrorDescription.! !

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/8/2023 23:31:51'!
PASSED!
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:32:13' prior: 50651808!
test02CanNotDebitFromAStolenCard
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445569' 
						expirationDate: (May ofYear: (Date today yearNumber + 1)) 
						owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self should: [ merchantProcessor debit: 100 from: creditCard ]
		raise: Error
		withMessageText: FakeMerchantProcessor stolenCreditCardErrorDescription.! !
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:32:51' prior: 50652036!
test03CanNotDebitFromACardWithoutCredit
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445599' 
						expirationDate: (May ofYear: (Date today yearNumber + 1)) 
						owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self should: [ merchantProcessor debit: 100 from: creditCard ]
		raise: Error
		withMessageText: FakeMerchantProcessor creditCardWithoutCreditErrorDescription.! !
!FakeMerchantProcessorTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:33:05' prior: 50652083!
test04ValidCreditCardCanBuy
	| creditCard merchantProcessor |
	creditCard := CreditCard number: '5400112233445566' 
						expirationDate: (May ofYear: (Date today yearNumber + 1)) 
						owner: 'Eepy Sánchez'.
	merchantProcessor := FakeMerchantProcessor new.
	self assert: ((merchantProcessor debit: 100 from: creditCard) = 'transaction_id').! !

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/8/2023 23:33:08'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/8/2023 23:33:08'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/8/2023 23:33:08'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/8/2023 23:33:08'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/8/2023 23:33:15'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/8/2023 23:33:15'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/8/2023 23:33:15'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 23:33:15'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 23:33:15'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 23:33:15'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/8/2023 23:33:15'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/8/2023 23:33:15'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 23:33:15'!
FAILURE!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 23:33:15'!
FAILURE!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/8/2023 23:33:21'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/8/2023 23:33:23'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/8/2023 23:33:24'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 23:33:26'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 23:33:27'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 23:33:28'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/8/2023 23:33:30'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/8/2023 23:33:31'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 23:33:33'!
FAILURE!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 23:33:33'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:36:11' prior: 50652963!
test09CheckoutFailsWithUnknownCartId
	| interface clientId password clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	
	self should: [ 
		interface 
			checkOutCart: 'notACartId'
			withCreditCardNumber: '5400112233445566'
			expiringOn: (testObjectsFactory todayPastYear) 
			andOwner:  'Eepy sanchez'.
		]
		raise: Error
		withMessageText: (Interface notACartIdErrorDescription).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:38:01' prior: 50654173!
test09CheckoutFailsWithUnknownCartId
	| interface clientId password clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	
	self should: [ 
		interface 
			checkOutCart: 'notACartId'
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
		]
		raise: Error
		withMessageText: (Interface notACartIdErrorDescription).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:39:41' prior: 50654195!
test09CheckoutFailsWithUnknownCartId
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	self should: [ 
		interface 
			checkOutCart: 'notACartId'
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
		]
		raise: Error
		withMessageText: (Interface notACartIdErrorDescription).! !

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 23:40:05'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/8/2023 23:40:05'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/8/2023 23:40:05'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/8/2023 23:40:05'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 23:40:05'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 23:40:05'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 23:40:05'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/8/2023 23:40:05'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/8/2023 23:40:05'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 23:40:05'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 23:40:08'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 23:41:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/8/2023 23:41:06'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 23:41:06'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:45:55'!
test10CheckoutWithValidCartIdAndCreditCard
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	self assert:  ((interface 
				checkOutCart: 'cartId'
				withCreditCardNumber: '5400112233445566'
				expiringOn: (May ofYear: (Date today yearNumber + 1)) 
				andOwner:  'Eepy sanchez')
			= 'transaction_id').! !

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/8/2023 23:45:58'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:46:15' prior: 50654396!
test10CheckoutWithValidCartIdAndCreditCard
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	self assert:  ((interface 
				checkOutCart: cartId
				withCreditCardNumber: '5400112233445566'
				expiringOn: (May ofYear: (Date today yearNumber + 1)) 
				andOwner:  'Eepy sanchez')
			= 'transaction_id').! !

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/8/2023 23:46:17'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:47:25' prior: 50652642!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:51:16' prior: 50654456!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
	cashier := Cashier withPricesList: catalog.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:51:55' prior: 50654469!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
	cashier := Cashier withPricesList: catalog.
	^cashier checkOutFor: cart withCreditCard: creditCard.! !

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/8/2023 23:51:59'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/8/2023 23:51:59'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/8/2023 23:51:59'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 23:51:59'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/8/2023 23:51:59'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/8/2023 23:51:59'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/8/2023 23:51:59'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/8/2023 23:51:59'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/8/2023 23:51:59'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/8/2023 23:51:59'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:55:44'!
test11ListPurchasesWithValidClientIdAndPassword
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/8/2023 23:58:39' prior: 50654536!
test11ListPurchasesWithValidClientIdAndPassword
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
	self assert: (interface listPurchasesOfClient: clientId withPass: password) = 'validBook|1|10'.! !

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/8/2023 23:58:43'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 00:00:06'!
listPurchasesOfClient: aClientId withPass: aPasswordString
	| password cartId |	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'VB 11/9/2023 00:02:01'!
Object subclass: #Interface
	instanceVariableNames: 'clients currentCarts catalog lastCartId clientsPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 00:01:59' prior: 50652604!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := Dictionary new.
	currentCarts := Dictionary new.! !

----End fileIn of /Users/fran/Documents/Facultad/Inge1/Cuis Limpio/Packages/TerseGuide.pck.st----!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 00:08:34' prior: 50654613!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := 
				(aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new)].
	currentCarts := Dictionary new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 00:08:41'!
PASSED!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 00:08:41'!
FAILURE!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 00:08:41'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'VB 11/9/2023 00:13:13'!
items

	^items copy.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 00:23:05'!
PASSED!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 00:23:05'!
FAILURE!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 00:23:05'!
FAILURE!

duration := Duration minutes: 30.!

duration.!

duration.!

duration.!

timespan := Timespan starting: (DateAndTime now) duration: 30 minutes.!

timespan !

timespan !

timespan !

DateAndTime now!

dnt minutes !

dnt secondsSinceMidnight !

dnt to: (30 minutes).!

dnt := DateAndTime now.!

dnt to: (30 minutes).!

dnt to: (DateAndTime now ).!

Object subclass: #FakeDateAndTime
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FakeDateAndTime category: 'TusLibros' stamp: 'VB 11/9/2023 01:09:59'!
Object subclass: #FakeDateAndTime
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

dnt := DateAndTime now.!
!FakeDateAndTime methodsFor: 'nil' stamp: 'VB 11/9/2023 01:10:56'!
now
	DateAndTime now.! !

dnt := 	DateAndTime now + 30 minutes!

dnt := 	(DateAndTime now + 30 minutes)!
!FakeDateAndTime methodsFor: 'nil' stamp: 'VB 11/9/2023 01:11:39'!
thirtyMinutesFromNow
	DateAndTime now + 30 minutes! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'VB 11/9/2023 01:13:58'!
Object subclass: #Interface
	instanceVariableNames: 'clients currentCarts catalog lastCartId clientsPurchases cartsExpirationTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 01:13:56' prior: 50657543!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := 
				(aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new)].
	currentCarts := Dictionary new.
	cartsExpirationTimes := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 01:14:40' prior: 50652626!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 01:14:56'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 01:14:56'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 01:14:56'!
ERROR!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 01:14:56'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 01:14:56'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 01:14:56'!
ERROR!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 01:14:56'!
ERROR!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 01:14:56'!
ERROR!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 01:14:56'!
ERROR!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 01:14:56'!
ERROR!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 01:14:56'!
ERROR!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 01:15:48'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 01:15:48'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 01:15:49'!
ERROR!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 01:15:49'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 01:15:49'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 01:15:49'!
ERROR!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 01:15:49'!
ERROR!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 01:15:49'!
ERROR!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 01:15:49'!
ERROR!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 01:15:49'!
ERROR!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 01:15:49'!
ERROR!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 01:16:24'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 01:16:25'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 01:16:27'!
ERROR!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 01:16:27'!
ERROR!
!FakeDateAndTime class methodsFor: 'nil' stamp: 'VB 11/9/2023 01:16:57'!
now
	^DateAndTime now.! !

!methodRemoval: FakeDateAndTime #thirtyMinutesFromNow stamp: 'VB 11/9/2023 01:17:01'!
thirtyMinutesFromNow
	DateAndTime now + 30 minutes!
!FakeDateAndTime class methodsFor: 'nil' stamp: 'VB 11/9/2023 01:17:24'!
thirtyMinutesFromNow
	^DateAndTime now + 30 minutes.! !

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 01:17:28'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 01:17:28'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 01:17:28'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 01:17:28'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 01:17:28'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 01:17:28'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 01:17:28'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 01:17:28'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 01:17:28'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 01:17:28'!
PASSED!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 01:17:28'!
FAILURE!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 01:17:28'!
FAILURE!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 01:17:38'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 01:17:39'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 01:17:39'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 01:17:39'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 01:17:39'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 01:17:39'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 01:17:39'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 01:17:39'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 01:17:39'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 01:17:39'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 01:17:39'!
PASSED!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 01:17:39'!
FAILURE!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 01:17:39'!
FAILURE!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 01:17:45'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 01:17:47'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 01:17:49'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 01:17:50'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 01:17:52'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 01:17:53'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 01:17:54'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 01:17:55'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 01:17:56'!
PASSED!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 01:17:57'!
FAILURE!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 01:17:57'!
FAILURE!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 01:18:09'!
FAILURE!

dnt := 	(DateAndTime now) - (DateAndTime now)!

dnt := 	(DateAndTime now) - (DateAndTime now) > 0!

dnt := 	(DateAndTime now) - (DateAndTime now) !

dnt := 	(DateAndTime now) - (DateAndTime now) !

dnt := ( 	(DateAndTime now) + (DateAndTime now))!

dnt := ( 	(DateAndTime now) + (DateAndTime now))!

dnt := ( 	(DateAndTime now) - (DateAndTime now))!

dnt := ( 	(DateAndTime now) - (DateAndTime now)) < 0 !

dnt := ( 	(DateAndTime now) - (DateAndTime now)) > DateAndTime now!

dnt := ( 	(DateAndTime now) - (DateAndTime now)) < DateAndTime now!

dnt := DateAndTime now < DateAndTime now!

dnt := DateAndTime now < DateAndTime now!

(DateAndTime now) < (DateAndTime now)!

(DateAndTime now) < (DateAndTime now + 10 minutes)!

(DateAndTime now) < (DateAndTime now + 30 minutes)!

(DateAndTime now) - (DateAndTime yesterday)!

((DateAndTime now) - (DateAndTime yesterday)) > (30 minutes)!

((DateAndTime now) - (DateAndTime yesterday)) > 30 minutes!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 01:29:19'!
isCart: cartId expiredAt: aDateAndTime
	^(aDateAndTime - (cartsExpirationTimes at: cartId)) > (30 minutes).! !

Object subclass: #FakeDateAndTime
	instanceVariableNames: 'fakeNow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FakeDateAndTime category: 'TusLibros' stamp: 'VB 11/9/2023 01:30:02'!
Object subclass: #FakeDateAndTime
	instanceVariableNames: 'fakeNow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: FakeDateAndTime class #thirtyMinutesFromNow stamp: 'VB 11/9/2023 01:31:11'!
thirtyMinutesFromNow
	^DateAndTime now + 30 minutes.!

!methodRemoval: FakeDateAndTime #now stamp: 'VB 11/9/2023 01:31:36'!
now
	DateAndTime now.!
!FakeDateAndTime class methodsFor: 'nil' stamp: 'VB 11/9/2023 01:32:47' overrides: 16904184!
initialize
	^self new initializeFakeDate! !
!FakeDateAndTime methodsFor: 'nil' stamp: 'VB 11/9/2023 01:33:20'!
initializeFakeDate
	fakeNow := DateAndTime now.! !
!FakeDateAndTime methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 01:33:32'!
now
	^fakeNow.! !

FakeDateAndTime new.!

f now.!

| f |!

f := FakeDateAndTime new.!

f now.!

f := FakeDateAndTime new.!

f now. !

f!
!FakeDateAndTime methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 01:36:49' overrides: 16920235!
initialize
	fakeNow := DateAndTime now.! !

!methodRemoval: FakeDateAndTime class #initialize stamp: 'VB 11/9/2023 01:36:55'!
initialize
	^self new initializeFakeDate!

f := FakeDateAndTime new.!

f!

f := FakeDateAndTime new.!

f.!

f now!

f now!

!methodRemoval: FakeDateAndTime class #now stamp: 'VB 11/9/2023 01:38:42'!
now
	^DateAndTime now.!

!methodRemoval: FakeDateAndTime #initializeFakeDate stamp: 'VB 11/9/2023 01:38:55'!
initializeFakeDate
	fakeNow := DateAndTime now.!
!FakeDateAndTime methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 01:42:45' prior: 50658191 overrides: 16920235!
initialize
	fakeNow := DateAndTime new.! !

f := FakeDateAndTime new.!

f now!

f := FakeDateAndTime now.!

f := DateAndTime now.!

fakeNow := (DateAndTime now) + 30 minutes!

f!

| f |!

f := Date new.!

f!

f.!

f := DateAndTime new now.!

f := DateAndTime new asUTC.!

f := DateAndTime now asUTC.!

f.!
!FakeDateAndTime methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 01:55:04'!
advance30Minutes
	fakeNow := fakeNow + 30 minutes.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:00:10'!
test12ExpiredCartCantAddBook
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: Interface ExpiredCartErrorDescription.! !

FakeDateAndTime class
	instanceVariableNames: 'fakeNow'!

!classDefinition: 'FakeDateAndTime class' category: 'TusLibros' stamp: 'VB 11/9/2023 02:00:54'!
FakeDateAndTime class
	instanceVariableNames: 'fakeNow'!
!FakeDateAndTime class methodsFor: 'nil' stamp: 'VB 11/9/2023 02:01:05'!
advance30Minutes
	fakeNow := fakeNow + 30 minutes.! !
!FakeDateAndTime class methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:01:35'!
now
	fakeNow := DateAndTime now.
	^fakeNow.! !

!methodRemoval: FakeDateAndTime #advance30Minutes stamp: 'VB 11/9/2023 02:01:46'!
advance30Minutes
	fakeNow := fakeNow + 30 minutes.!

!methodRemoval: FakeDateAndTime #initialize stamp: 'VB 11/9/2023 02:01:50'!
initialize
	fakeNow := DateAndTime new.!

!methodRemoval: FakeDateAndTime #now stamp: 'VB 11/9/2023 02:01:55'!
now
	^fakeNow.!

Object subclass: #FakeDateAndTime
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FakeDateAndTime category: 'TusLibros' stamp: 'VB 11/9/2023 02:02:00'!
Object subclass: #FakeDateAndTime
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FakeDateAndTime class methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:06:37' overrides: 16785646!
new
	fakeNow := DateAndTime now.! !
!FakeDateAndTime class methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:06:44' prior: 50658262!
now
	^fakeNow.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:07:37'!
expiredCartErrorDescription
	^'This cart has expired.'	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:07:47' prior: 50658228!
test12ExpiredCartCantAddBook
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: Interface expiredCartErrorDescription.! !

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 02:07:50'!
ERROR!

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 02:07:50'!
ERROR!

!methodRemoval: FakeDateAndTime class #new stamp: 'VB 11/9/2023 02:08:18'!
new
	fakeNow := DateAndTime now.!
!FakeDateAndTime class methodsFor: 'nil' stamp: 'VB 11/9/2023 02:08:39'!
initializeNew
	fakeNow := (DateAndTime now).! !

FakeDateAndTime initializeNew !

FakeDateAndTime now!

FakeDateAndTime advance30Minutes !

FakeDateAndTime now!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:12:27' prior: 50653579!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	(self isCart: aCartId expiredAt: FakeDateAndTime now)
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [
				cart := currentCarts
		 			at: aCartId
		 			ifAbsent: [^self error: self class notACartIdErrorDescription].

				cart add: anIsbn withOccurrences: aQuantity. ].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:12:45' prior: 50658303!
test12ExpiredCartCantAddBook
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: Interface expiredCartErrorDescription.! !

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 02:12:49'!
FAILURE!

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 02:12:54'!
FAILURE!

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 02:12:54'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:15:52' prior: 50658343!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	(self isCart: aCartId expiredAt: FakeDateAndTime now)
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [
				cart := currentCarts
		 			at: aCartId
		 			ifAbsent: [^self error: self class notACartIdErrorDescription].

				cart add: anIsbn withOccurrences: aQuantity. ].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:15:54' prior: 50658391!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	(self isCart: aCartId expiredAt: FakeDateAndTime now)
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [
				cart := currentCarts
		 			at: aCartId
		 			ifAbsent: [^self error: self class notACartIdErrorDescription].

				cart add: anIsbn withOccurrences: aQuantity. ].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:12:27' prior: 50658406!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	(self isCart: aCartId expiredAt: FakeDateAndTime now)
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [
				cart := currentCarts
		 			at: aCartId
		 			ifAbsent: [^self error: self class notACartIdErrorDescription].

				cart add: anIsbn withOccurrences: aQuantity. ].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:17:48' prior: 50658421!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	cart := currentCarts at: aCartId ifAbsent: [^self error: self class notACartIdErrorDescription].

	(self isCart: aCartId expiredAt: FakeDateAndTime now)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [cart add: anIsbn withOccurrences: aQuantity].! !

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 02:17:58'!
FAILURE!

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 02:17:58'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:19:10' prior: 50658358!
test12ExpiredCartCantAddBook
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).! !

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 02:19:13'!
FAILURE!

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 02:19:13'!
FAILURE!

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 02:19:49'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 02:22:15' prior: 50658148!
isCart: cartId expiredAt: aDateAndTime
	^(aDateAndTime - (cartsExpirationTimes at: cartId)) >= (30 minutes).! !

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 02:22:20'!
PASSED!

----SNAPSHOT----(9 November 2023 02:27:51) CuisUniversity-5981.image priorSource: 10269340!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:01:43'!
test13ExpiredCartAfterTimeTravellingCanAddBook
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).
	FakeDateAndTime goBack30Minutes.
	self shouldnt: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error! !

!testRun: #InterfaceTest #test13ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 08:02:51'!
ERROR!

!testRun: #InterfaceTest #test13ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 08:02:51'!
ERROR!
!FakeDateAndTime class methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:03:10'!
goBack30Minutes
	fakeNow := fakeNow - 30 minutes.! !

!testRun: #InterfaceTest #test13ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 08:03:21'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 08:03:25'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:05:25' prior: 50654484!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	(self isCart: cartId expiredAt: FakeDateAndTime now)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [
				creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
				cashier := Cashier withPricesList: catalog.
				^cashier checkOutFor: cart withCreditCard: creditCard.
			].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:07:20' prior: 50652612!
listCart: aCartId
	| cart |
	cart := currentCarts at: aCartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	(self isCart: aCartId expiredAt: FakeDateAndTime now)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [
			^ (catalog keys) inject: ''
						   into: [:stringList :anIsbn | ((cart occurrencesOf: anIsbn) = 0) 
								ifFalse: [stringList, anIsbn , '|', (cart occurrencesOf: anIsbn) asString, '|']
								ifTrue: [stringList]. 
		 						].
			].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:11:14'!
test14ExpiredCartCantCheckOut
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1.
	FakeDateAndTime advance30Minutes.
	self should: []
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:11:46' prior: 50658591!
test14ExpiredCartCantCheckOut
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1.
	FakeDateAndTime advance30Minutes.
	self should: [interface 
				checkOutCart: cartId
				withCreditCardNumber: '5400112233445566'
				expiringOn: (May ofYear: (Date today yearNumber + 1)) 
				andOwner:  'Eepy sanchez']
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).! !

!testRun: #InterfaceTest #test14ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 08:11:50'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:12:32'!
test15ExpiredCartCantListCart
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1.
	FakeDateAndTime advance30Minutes.
	self should: [interface listCart: cartId]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).! !

!testRun: #InterfaceTest #test15ExpiredCartCantListCart stamp: 'VB 11/9/2023 08:12:41'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:14:24' prior: 50654561!
test11ListPurchasesWithValidClientIdAndPassword
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
	self assert: true "(interface listPurchasesOfClient: clientId withPass: password) = 'validBook|1|10'".! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 08:14:27'!
PASSED!

!testRun: #InterfaceTest #test15ExpiredCartCantListCart stamp: 'VB 11/9/2023 08:14:27'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:16:36'!
test11ExpiredCartCantAddBook
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).! !

!methodRemoval: InterfaceTest #test12ExpiredCartCantAddBook stamp: 'VB 11/9/2023 08:16:36'!
test12ExpiredCartCantAddBook
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:16:51'!
test12ExpiredCartCantCheckOut
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1.
	FakeDateAndTime advance30Minutes.
	self should: [interface 
				checkOutCart: cartId
				withCreditCardNumber: '5400112233445566'
				expiringOn: (May ofYear: (Date today yearNumber + 1)) 
				andOwner:  'Eepy sanchez']
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).! !

!methodRemoval: InterfaceTest #test14ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 08:16:51'!
test14ExpiredCartCantCheckOut
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1.
	FakeDateAndTime advance30Minutes.
	self should: [interface 
				checkOutCart: cartId
				withCreditCardNumber: '5400112233445566'
				expiringOn: (May ofYear: (Date today yearNumber + 1)) 
				andOwner:  'Eepy sanchez']
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:17:00'!
test13ExpiredCartCantListCart
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1.
	FakeDateAndTime advance30Minutes.
	self should: [interface listCart: cartId]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).! !

!methodRemoval: InterfaceTest #test15ExpiredCartCantListCart stamp: 'VB 11/9/2023 08:17:01'!
test15ExpiredCartCantListCart
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1.
	FakeDateAndTime advance30Minutes.
	self should: [interface listCart: cartId]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:17:11'!
test14ExpiredCartAfterTimeTravellingCanAddBook
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).
	FakeDateAndTime goBack30Minutes.
	self shouldnt: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error! !

!methodRemoval: InterfaceTest #test13ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 08:17:11'!
test13ExpiredCartAfterTimeTravellingCanAddBook
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).
	FakeDateAndTime goBack30Minutes.
	self shouldnt: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:17:19'!
test15ListPurchasesWithValidClientIdAndPassword
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
	self assert: true "(interface listPurchasesOfClient: clientId withPass: password) = 'validBook|1|10'".! !

!methodRemoval: InterfaceTest #test11ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:17:19'!
test11ListPurchasesWithValidClientIdAndPassword
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
	self assert: true "(interface listPurchasesOfClient: clientId withPass: password) = 'validBook|1|10'".!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:17:24'!
PASSED!

----SNAPSHOT----(9 November 2023 08:18:03) CuisUniversity-5981.image priorSource: 10459151!

----SNAPSHOT----(9 November 2023 08:18:16) CuisUniversity-5981.image priorSource: 10482543!

!classDefinition: #Interface category: 'TusLibros' stamp: 'VB 11/9/2023 08:24:20'!
Object subclass: #Interface
	instanceVariableNames: 'clients currentCarts catalog lastCartId clientsPurchases cartsExpirationTimes cartsByClients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:24:18' prior: 50657842!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := 
				(aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new)].
	currentCarts := Dictionary new.
	cartsByClients := Dictionary new.
	cartsExpirationTimes := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:26:36' prior: 50659246!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new)].
	currentCarts := Dictionary new.
	cartsByClients := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:clientsCarts :aKey | clientsCarts add: aKey -> (OrderedCollection new)].
	cartsExpirationTimes := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:28:13' prior: 50657857!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	(cartsByClients at: aClientId) add: cartId.
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'VB 11/9/2023 08:28:32'!
Object subclass: #Interface
	instanceVariableNames: 'clients currentCarts catalog lastCartId clientsPurchases cartsExpirationTimes cartsIdsByClients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:28:32' prior: 50659282!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	(cartsIdsByClients at: aClientId) add: cartId.
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:28:32' prior: 50659262!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new)].
	currentCarts := Dictionary new.
	cartsIdsByClients := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:clientsCarts :aKey | clientsCarts add: aKey -> (OrderedCollection new)].
	cartsExpirationTimes := Dictionary new.! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'VB 11/9/2023 08:28:44'!
Object subclass: #Interface
	instanceVariableNames: 'clients currentCarts catalog lastCartId clientsPurchases cartsExpirationTimes cartsIdsByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:28:44' prior: 50659312!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	(cartsIdsByClient at: aClientId) add: cartId.
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:28:44' prior: 50659332!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new)].
	currentCarts := Dictionary new.
	cartsIdsByClient := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:clientsCarts :aKey | clientsCarts add: aKey -> (OrderedCollection new)].
	cartsExpirationTimes := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:32:09' prior: 50658551!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	(self isCart: cartId expiredAt: FakeDateAndTime now)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [ | transactionId clientId |
				creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
				cashier := Cashier withPricesList: catalog.
				transactionId := cashier checkOutFor: cart withCreditCard: creditCard.
				clientId := cartsIdsByClient keyAtValue: cartId.
				(clientsPurchases at: clientId) addAll: (cart ).
				^transactionId.
			].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:32:24' prior: 50659402!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	(self isCart: cartId expiredAt: FakeDateAndTime now)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [ | transactionId clientId |
				creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
				cashier := Cashier withPricesList: catalog.
				transactionId := cashier checkOutFor: cart withCreditCard: creditCard.
				clientId := cartsIdsByClient keyAtValue: cartId.
				(clientsPurchases at: clientId) addAll: (cart items).
				^transactionId.
			].! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:32:50' prior: 50659046!
test15ListPurchasesWithValidClientIdAndPassword
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
	self assert: (interface listPurchasesOfClient: clientId withPass: password) = 'validBook|1|10'.! !

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:32:54'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:34:30'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:35:15'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:38:55'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:42:35' prior: 50659362!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	cartsIdsByClient at: aClientId put: ((cartsIdsByClient at: aClientId) add: cartId).
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:42:41'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:42:41'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:43:00' prior: 50659497!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	(cartsIdsByClient at: aClientId) add: cartId.
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 08:43:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 08:43:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 08:43:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 08:43:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 08:43:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 08:43:07'!
ERROR!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 08:43:07'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 08:43:07'!
ERROR!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 08:43:07'!
ERROR!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 08:43:07'!
ERROR!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 08:43:07'!
ERROR!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 08:43:07'!
ERROR!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 08:43:07'!
ERROR!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 08:43:07'!
ERROR!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 08:43:07'!
ERROR!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 08:43:07'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:43:07'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:45:46' prior: 50659455!
test15ListPurchasesWithValidClientIdAndPassword
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
	self assert: true "(interface listPurchasesOfClient: clientId withPass: password) = 'validBook|1|10'".! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:46:10' prior: 50659526!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	"(cartsIdsByClient at: aClientId) add: cartId."
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 08:46:12'!
ERROR!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 08:46:12'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:46:12'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:46:28'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:46:28'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:47:03' prior: 50659428!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	(self isCart: cartId expiredAt: FakeDateAndTime now)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [ | transactionId clientId |
				creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
				cashier := Cashier withPricesList: catalog.
				transactionId := cashier checkOutFor: cart withCreditCard: creditCard.
				"clientId := cartsIdsByClient keyAtValue: cartId.
				(clientsPurchases at: clientId) addAll: (cart items)."
				^transactionId.
			].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 08:47:08'!
PASSED!

Object subclass: #Interface
	instanceVariableNames: 'clients currentCarts catalog lastCartId clientsPurchases cartsExpirationTimes cartsIdsByClient fakeClock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'VB 11/9/2023 08:48:38'!
Object subclass: #Interface
	instanceVariableNames: 'clients currentCarts catalog lastCartId clientsPurchases cartsExpirationTimes cartsIdsByClient fakeClock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 08:48:53' prior: 50659382!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new)].
	currentCarts := Dictionary new.
	cartsIdsByClient := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:clientsCarts :aKey | clientsCarts add: aKey -> (OrderedCollection new)].
	cartsExpirationTimes := Dictionary new.
	fakeClock := FakeDateAndTime new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 09:46:53' prior: 50659859!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	(self isCart: cartId expiredAt: FakeDateAndTime now)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [ | transactionId clientId |
				creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
				cashier := Cashier withPricesList: catalog.
				transactionId := cashier checkOutFor: cart withCreditCard: creditCard.
				clientId := cartsIdsByClient keyAtValue: cartId.
				(clientsPurchases at: clientId) addAll: (cart items).
				^transactionId.
			].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 09:47:00' prior: 50659703!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	(cartsIdsByClient at: aClientId) add: cartId.
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 09:50:21' prior: 50660078!
createCartFor: aClientId withPass: aPasswordString
	| password cartId clientsCartsId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	clientsCartsId := cartsIdsByClient at: aClientId.
	clientsCartsId add: cartId.
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 09:50:25'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 09:50:25'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 09:50:25'!
ERROR!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 09:50:25'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 09:50:25'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 09:50:25'!
ERROR!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 09:50:25'!
ERROR!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 09:50:25'!
ERROR!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 09:50:25'!
ERROR!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 09:50:25'!
ERROR!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 09:50:25'!
ERROR!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 09:50:25'!
ERROR!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 09:50:25'!
ERROR!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 09:50:25'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 09:50:25'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 09:50:33'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 09:50:33'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 09:52:19'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 09:47:00' prior: 50660098!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	(cartsIdsByClient at: aClientId) add: cartId.
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 09:56:41' prior: 50660031!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new). purchasesDict].
	currentCarts := Dictionary new.
	cartsIdsByClient := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:clientsCarts :aKey | clientsCarts add: aKey -> (OrderedCollection new). clientsCarts].
	cartsExpirationTimes := Dictionary new.
	fakeClock := FakeDateAndTime new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 09:56:56'!
ERROR!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 09:56:56'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 09:56:56'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 09:57:18' prior: 50659675!
test15ListPurchasesWithValidClientIdAndPassword
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
	self assert: (interface listPurchasesOfClient: clientId withPass: password) = 'validBook|1|10'.! !

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 09:57:21'!
ERROR!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 09:57:21'!
ERROR!

!classDefinition: #Interface category: 'TusLibros' stamp: 'VB 11/9/2023 10:05:16'!
Object subclass: #Interface
	instanceVariableNames: 'clients currentCarts catalog lastCartId clientsPurchases cartsExpirationTimes clientByCartId fakeClock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 10:05:16' prior: 50660183!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	(clientByCartId at: aClientId) add: cartId.
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 10:05:16' prior: 50660203!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new). purchasesDict].
	currentCarts := Dictionary new.
	clientByCartId := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:clientsCarts :aKey | clientsCarts add: aKey -> (OrderedCollection new). clientsCarts].
	cartsExpirationTimes := Dictionary new.
	fakeClock := FakeDateAndTime new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 10:05:16' prior: 50660052!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	(self isCart: cartId expiredAt: FakeDateAndTime now)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [ | transactionId clientId |
				creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
				cashier := Cashier withPricesList: catalog.
				transactionId := cashier checkOutFor: cart withCreditCard: creditCard.
				clientId := clientByCartId keyAtValue: cartId.
				(clientsPurchases at: clientId) addAll: (cart items).
				^transactionId.
			].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 10:05:34' prior: 50660419!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new). purchasesDict].
	currentCarts := Dictionary new.
	clientByCartId := Dictionary new.
	cartsExpirationTimes := Dictionary new.
	fakeClock := FakeDateAndTime new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 10:34:03' prior: 50660399!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	clientByCartId add: cartId -> aClientId.
	cartsExpirationTimes add: cartId -> (FakeDateAndTime now).
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 10:34:50' prior: 50660441!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	(self isCart: cartId expiredAt: FakeDateAndTime now)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [ | transactionId clientId |
				creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
				cashier := Cashier withPricesList: catalog.
				transactionId := cashier checkOutFor: cart withCreditCard: creditCard.
				clientId := clientByCartId at: cartId.
				(clientsPurchases at: clientId) addAll: (cart items).
				^transactionId.
			].! !

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 10:34:56'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 10:34:56'!
FAILURE!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 10:34:56'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 10:40:11' prior: 50654592!
listPurchasesOfClient: aClientId withPass: aPasswordString
	| password cartId purchases purchasesString totalAmount |	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	purchases := clientsPurchases at: aClientId.
	purchasesString := ''.
	totalAmount := 0.
	(catalog keys) do: [:item | purchasesString, item, '|']
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 10:47:35' prior: 50660587!
listPurchasesOfClient: aClientId withPass: aPasswordString
	| password cartId purchases purchasesString totalAmount |	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	purchases := clientsPurchases at: aClientId.
	purchasesString := ''.
	totalAmount := 0.
	(catalog keys) do: [:item | | itemQuantity |
						itemQuantity := (purchases occurrencesOf: item).
						(itemQuantity = 0)
						ifFalse: [ purchasesString := purchasesString, item, '|', itemQuantity asString, '|'.
								totalAmount := totalAmount + (itemQuantity*(catalog at:item)). ].
					].
	^purchasesString, totalAmount asString.
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 10:47:55' prior: 50660606!
listPurchasesOfClient: aClientId withPass: aPasswordString
	| password purchases purchasesString totalAmount |	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	purchases := clientsPurchases at: aClientId.
	purchasesString := ''.
	totalAmount := 0.
	(catalog keys) do: [:item | | itemQuantity |
						itemQuantity := (purchases occurrencesOf: item).
						(itemQuantity = 0)
						ifFalse: [ purchasesString := purchasesString, item, '|', itemQuantity asString, '|'.
								totalAmount := totalAmount + (itemQuantity*(catalog at:item)). ].
					].
	^purchasesString, totalAmount asString.
	! !

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 10:47:58'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 10:47:58'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 10:49:46'!
test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory anotherItemSellByTheStore 
			bookQuantity: 1.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 3.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory anotherItemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
	self assert: (interface listPurchasesOfClient: clientId withPass: password) = 'validBook|3|validBook2|2|30'.! !

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 10:49:49'!
FAILURE!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 10:49:49'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 10:50:11' prior: 50660714!
test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog).
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory anotherItemSellByTheStore 
			bookQuantity: 1.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 3.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory anotherItemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
	self assert: (interface listPurchasesOfClient: clientId withPass: password) = 'validBook|3|validBook2|2|50'.! !

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 10:50:14'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 10:51:01'!
PASSED!

----SNAPSHOT----(9 November 2023 10:56:17) CuisUniversity-5981.image priorSource: 10482636!

----SNAPSHOT----(9 November 2023 10:56:19) CuisUniversity-5981.image priorSource: 10536924!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:01:58' prior: 50658832!
test11ExpiredCartCantAddBook
	| interface clientId password cartId clientPasswordDict |
	FakeDateAndTime initializeNew.
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:02:26'!
initializeWith: aClientDictionary andCatalog: aCatalog andClock: aDateAndTimeClass
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new). purchasesDict].
	currentCarts := Dictionary new.
	clientByCartId := Dictionary new.
	cartsExpirationTimes := Dictionary new.
	fakeClock := aDateAndTimeClass new.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:08:37'!
withClients: aClientDictionary andCatalog: aCatalog andClock: aDateAndTimeClass
	^self new initializeWith: aClientDictionary andCatalog: aCatalog.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:08:44' prior: 50660978!
withClients: aClientDictionary andCatalog: aCatalog andClock: aDateAndTimeClass
	^self new initializeWith: aClientDictionary andCatalog: aCatalog andClock: aDateAndTimeClass.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:08:55' prior: 50660960!
initializeWith: aClientDictionary andCatalog: aCatalog andClock: aDateAndTimeClass
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new). purchasesDict].
	currentCarts := Dictionary new.
	clientByCartId := Dictionary new.
	cartsExpirationTimes := Dictionary new.
	fakeClock := aDateAndTimeClass.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:10:11' prior: 50660936!
test11ExpiredCartCantAddBook
	| interface clientId password cartId clientPasswordDict |
	
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).! !

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 11:10:13'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:11:31'!
isCartExpired: cartId
	^(fakeClock now - (cartsExpirationTimes at: cartId)) >= (30 minutes).! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:11:44' prior: 50658436!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	cart := currentCarts at: aCartId ifAbsent: [^self error: self class notACartIdErrorDescription].

	(self isCartExpired: aCartId)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [cart add: anIsbn withOccurrences: aQuantity].! !

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 11:11:53'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:12:47' prior: 50658879!
test12ExpiredCartCantCheckOut
	| interface clientId password cartId clientPasswordDict |
	
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1.
	FakeDateAndTime advance30Minutes.
	self should: [interface 
				checkOutCart: cartId
				withCreditCardNumber: '5400112233445566'
				expiringOn: (May ofYear: (Date today yearNumber + 1)) 
				andOwner:  'Eepy sanchez']
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:12:57' prior: 50658937!
test13ExpiredCartCantListCart
	| interface clientId password cartId clientPasswordDict |
	
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1.
	FakeDateAndTime advance30Minutes.
	self should: [interface listCart: cartId]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:13:08' prior: 50658986!
test14ExpiredCartAfterTimeTravellingCanAddBook
	| interface clientId password cartId clientPasswordDict |
	
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	FakeDateAndTime advance30Minutes.
	self should: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error
		withMessageText: (Interface expiredCartErrorDescription).
	FakeDateAndTime goBack30Minutes.
	self shouldnt: [interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1]
		raise: Error! !

!methodRemoval: Interface class #withClients:andCatalog: stamp: 'VB 11/9/2023 11:13:42'!
withClients: aClientDictionary andCatalog: aCatalog
	^self new initializeWith: aClientDictionary andCatalog: aCatalog.!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:14:00' prior: 50652809!
test01CreateCartWithNonRegisteredClientIdShouldFail
	| interface clientId password |
	interface := Interface withClients: (Dictionary new) andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	clientId := 'pepito97'.
	password := 'password'.
	
	self   should: [interface createCartFor: clientId withPass: password] 
		raise: Error 
		withMessageText: (Interface invalidClientOrPasswordErrorDescription).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:14:07' prior: 50652825!
test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail
	| interface clientId password clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := (Dictionary new).
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: (clientPasswordDict) andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	self   should: [interface createCartFor: clientId withPass: 'passwor'] 
		raise: Error 
		withMessageText: (Interface invalidClientOrPasswordErrorDescription).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:14:13' prior: 50652844!
test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart
	| interface clientId password clientPasswordDict cartId |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	self shouldnt: [interface listCart: cartId] raise: Error.
	.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:14:18' prior: 50652863!
test04AddToCartWithInvalidCartIdShouldFail
	| interface clientPasswordDict |
	
	clientPasswordDict := Dictionary new.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	
	self  should: [interface addToCart: 'notACartID' 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1] 
		raise: Error
		withMessageText: Interface notACartIdErrorDescription.
	.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:14:24' prior: 50652880!
test05ListCartWithInvalidCartIdShouldFail
	| interface clientPasswordDict |
	
	clientPasswordDict := Dictionary new.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	
	self  should: [interface listCart: 'notACartID' ] 
		raise: Error
		withMessageText: Interface notACartIdErrorDescription.
	.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:14:29' prior: 50652894!
test06ListCartWithValidCartIdListsCartISBN
	| interface clientId password clientPasswordDict cartId actualText |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	actualText := (interface listCart: cartId ).
	
	self  assert: actualText = 'validBook|1|'.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:14:34' prior: 50652916!
test07ListCartWithValidCartIdListsCartISBNSeveralBooks
	| interface clientId password clientPasswordDict cartId actualText |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory anotherItemSellByTheStore 
			bookQuantity: 3.
	actualText := (interface listCart: cartId ).
	
	self  assert: actualText = 'validBook|1|validBook2|3|'.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:14:39' prior: 50652943!
test08AddToCartWithValidCartIdShouldntFail
	| interface clientId password clientPasswordDict cartId |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	
	self shouldnt: [ interface addToCart: cartId 
						bookIsbn: testObjectsFactory itemSellByTheStore 
						bookQuantity: 1. ]
		raise: Error.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:14:44' prior: 50654217!
test09CheckoutFailsWithUnknownCartId
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	self should: [ 
		interface 
			checkOutCart: 'notACartId'
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
		]
		raise: Error
		withMessageText: (Interface notACartIdErrorDescription).! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:14:51' prior: 50654426!
test10CheckoutWithValidCartIdAndCreditCard
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	self assert:  ((interface 
				checkOutCart: cartId
				withCreditCardNumber: '5400112233445566'
				expiringOn: (May ofYear: (Date today yearNumber + 1)) 
				andOwner:  'Eepy sanchez')
			= 'transaction_id').! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:15:04' prior: 50660354!
test15ListPurchasesWithValidClientIdAndPassword
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
	self assert: (interface listPurchasesOfClient: clientId withPass: password) = 'validBook|1|10'.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:15:08' prior: 50660758!
test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks
	| interface clientId password cartId clientPasswordDict |
	clientId := 'pepito97'.
	password := 'password'.
	clientPasswordDict := Dictionary new.
	clientPasswordDict add: clientId -> password.
	interface := Interface withClients: clientPasswordDict andCatalog: (testObjectsFactory defaultCatalog) andClock: FakeDateAndTime.
	cartId := interface createCartFor: clientId withPass: password.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory anotherItemSellByTheStore 
			bookQuantity: 1.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory itemSellByTheStore 
			bookQuantity: 3.
	interface addToCart: cartId 
			bookIsbn: testObjectsFactory anotherItemSellByTheStore 
			bookQuantity: 1.
	interface checkOutCart: cartId
			withCreditCardNumber: '5400112233445566'
			expiringOn: (May ofYear: (Date today yearNumber + 1)) 
			andOwner:  'Eepy sanchez'.
	self assert: (interface listPurchasesOfClient: clientId withPass: password) = 'validBook|3|validBook2|2|50'.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:15:39' prior: 50660505!
checkOutCart: cartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier |
	cart := currentCarts at: cartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	(self isCartExpired: cartId)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [ | transactionId clientId |
				creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
				cashier := Cashier withPricesList: catalog.
				transactionId := cashier checkOutFor: cart withCreditCard: creditCard.
				clientId := clientByCartId at: cartId.
				(clientsPurchases at: clientId) addAll: (cart items).
				^transactionId.
			].! !

!methodRemoval: Interface #initializeWith:andCatalog: stamp: 'VB 11/9/2023 11:16:03'!
initializeWith: aClientDictionary andCatalog: aCatalog
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new). purchasesDict].
	currentCarts := Dictionary new.
	clientByCartId := Dictionary new.
	cartsExpirationTimes := Dictionary new.
	fakeClock := FakeDateAndTime new.!

!methodRemoval: Interface #isCart:expiredAt: stamp: 'VB 11/9/2023 11:16:12'!
isCart: cartId expiredAt: aDateAndTime
	^(aDateAndTime - (cartsExpirationTimes at: cartId)) >= (30 minutes).!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:16:23' prior: 50658572!
listCart: aCartId
	| cart |
	cart := currentCarts at: aCartId ifAbsent: [ ^self error: self class notACartIdErrorDescription ].
	(self isCartExpired: aCartId)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [
			^ (catalog keys) inject: ''
						   into: [:stringList :anIsbn | ((cart occurrencesOf: anIsbn) = 0) 
								ifFalse: [stringList, anIsbn , '|', (cart occurrencesOf: anIsbn) asString, '|']
								ifTrue: [stringList]. 
		 						].
			].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:17:11' prior: 50660485!
createCartFor: aClientId withPass: aPasswordString
	| password cartId |	
	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPasswordString) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	clientByCartId add: cartId -> aClientId.
	cartsExpirationTimes add: cartId -> (fakeClock now).
	^cartId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 11:17:34'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 11:17:34'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:20:20'!
assertCartNotEmpty: aCart
	
	(aCart isEmpty) ifTrue: [^self error: self class emptyCartErrorDescription].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:20:42' prior: 50652128!
checkOutFor: aCart withCreditCard: aCreditCard
	
	self assertCartNotEmpty: aCart.
	(aCreditCard isExpired) ifTrue: [ ^self error: self class creditCardIsExpiredErrorDescription ].
	^merchantProcessor debit: (self calculateDebitFor: aCart) from: aCreditCard.
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:21:06'!
assertCreditCardNotExpired: aCreditCard
	
	(aCreditCard isExpired) ifTrue: [ ^self error: self class creditCardIsExpiredErrorDescription ].
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:21:44' prior: 50661665!
checkOutFor: aCart withCreditCard: aCreditCard
	
	self assertCartNotEmpty: aCart.
	self assertCreditCardNotExpired: aCreditCard.
	^merchantProcessor debit: (self calculateDebitFor: aCart) from: aCreditCard.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 11:21:47'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 11:21:47'!
PASSED!
!FakeMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:26:45'!
assertAmountIsPositive: anAmount
	(anAmount strictlyPositive) ifFalse: [self error: self class canNotDebitANonPositiveAmountErrorDescription].! !
!FakeMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:27:56' prior: 50652005!
debit: anAmount from: aCreditCard
	self assertAmountIsPositive: anAmount.
	(aCreditCard cardNumber = '5400112233445569') 
					ifTrue: [self error: self class stolenCreditCardErrorDescription].
	(aCreditCard cardNumber = '5400112233445599') 
					ifTrue: [self error: self class creditCardWithoutCreditErrorDescription].
	^'transaction_id'.! !
!FakeMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:28:33'!
assertCreditCardIsNotStolen: aCreditCard
	(aCreditCard cardNumber = '5400112233445569') ifTrue: [self error: self class stolenCreditCardErrorDescription].! !
!FakeMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:29:27' prior: 50661835!
debit: anAmount from: aCreditCard
	self assertAmountIsPositive: anAmount.
	self assertCreditCardIsNotStolen: aCreditCard.
	(aCreditCard cardNumber = '5400112233445599') 
					ifTrue: [self error: self class creditCardWithoutCreditErrorDescription].
	^'transaction_id'.! !
!FakeMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:30:29'!
assertCreditCard: aCreditCard hasCredit: anAmount
	(aCreditCard cardNumber = '5400112233445599') ifTrue: [self error: self class creditCardWithoutCreditErrorDescription].! !
!FakeMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:31:18' prior: 50661858!
debit: anAmount from: aCreditCard
	self assertAmountIsPositive: anAmount.
	self assertCreditCardIsNotStolen: aCreditCard.
	self assertCreditCard: aCreditCard hasCredit: anAmount.
	^'transaction_id'.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 11:31:29'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 11:31:29'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:34:52'!
assertCartIdIsValidAndReturnCart: aCartId
	^currentCarts at: aCartId ifAbsent: [^self error: self class notACartIdErrorDescription].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:35:39' prior: 50661046!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	cart := self assertCartIdIsValidAndReturnCart: aCartId.

	(self isCartExpired: aCartId)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [cart add: anIsbn withOccurrences: aQuantity].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 11:35:52'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 11:35:52'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:36:42'!
assertCartIsNotExpired: aCartId
	(self isCartExpired: aCartId)	ifTrue: [^self error: self class expiredCartErrorDescription].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:37:39' prior: 50661440!
checkOutCart: aCartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier |
	cart := self assertCartIdIsValidAndReturnCart: aCartId.
	(self isCartExpired: aCartId)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [ | transactionId clientId |
				creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
				cashier := Cashier withPricesList: catalog.
				transactionId := cashier checkOutFor: cart withCreditCard: creditCard.
				clientId := clientByCartId at: aCartId.
				(clientsPurchases at: clientId) addAll: (cart items).
				^transactionId.
			].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:37:58' prior: 50661488!
listCart: aCartId
	| cart |
	cart := self assertCartIdIsValidAndReturnCart: aCartId.
	(self isCartExpired: aCartId)	
		ifTrue: [^self error: self class expiredCartErrorDescription]
		ifFalse: [
			^ (catalog keys) inject: ''
						   into: [:stringList :anIsbn | ((cart occurrencesOf: anIsbn) = 0) 
								ifFalse: [stringList, anIsbn , '|', (cart occurrencesOf: anIsbn) asString, '|']
								ifTrue: [stringList]. 
		 						].
			].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 11:38:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 11:38:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 11:38:07'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 11:38:07'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:38:46' prior: 50662029!
addToCart: aCartId 		bookIsbn: anIsbn bookQuantity: aQuantity
	| cart |
	
	cart := self assertCartIdIsValidAndReturnCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	cart add: anIsbn withOccurrences: aQuantity.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:40:28' prior: 50662181!
checkOutCart: aCartId withCreditCardNumber: aCCN expiringOn: anExpirationDate andOwner: anOwner
	| cart creditCard cashier transactionId clientId |
	
	cart := self assertCartIdIsValidAndReturnCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	creditCard := CreditCard number: aCCN expirationDate: anExpirationDate owner: anOwner.
	cashier := Cashier withPricesList: catalog.
	transactionId := cashier checkOutFor: cart withCreditCard: creditCard.
	clientId := clientByCartId at: aCartId.
	(clientsPurchases at: clientId) addAll: (cart items).
	^transactionId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 11:40:30'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 11:40:30'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:41:32' prior: 50662205!
listCart: aCartId
	| cart |
	cart := self assertCartIdIsValidAndReturnCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	^ (catalog keys) inject: '' into: [:stringList :anIsbn | ((cart occurrencesOf: anIsbn) = 0) 
								ifFalse: [stringList, anIsbn , '|', (cart occurrencesOf: anIsbn) asString, '|']
								ifTrue: [stringList]. 
		 					].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 11:42:21'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 11:42:21'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:43:55'!
assertClientIdAndPasswordAreValid: aClientId with: aPassword
	^clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:44:51' prior: 50662666!
assertClientIdAndPasswordAreValid: aClientId with: aPassword
	| password |	
	password := clients at: aClientId ifAbsent: [^self error: self class invalidClientOrPasswordErrorDescription].
	(password = aPassword) ifFalse: [^self error: self class invalidClientOrPasswordErrorDescription].! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:46:08' prior: 50661506!
createCartFor: aClientId withPass: aPasswordString
	| cartId |	
	
	self assertClientIdAndPasswordAreValid: aClientId with: aPasswordString.
	lastCartId := lastCartId + 1.
	cartId := lastCartId asString.
	currentCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	clientByCartId add: cartId -> aClientId.
	cartsExpirationTimes add: cartId -> (fakeClock now).
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:46:22' prior: 50662687!
createCartFor: aClientId withPass: aPasswordString
	| newCartId |	
	
	self assertClientIdAndPasswordAreValid: aClientId with: aPasswordString.
	lastCartId := lastCartId + 1.
	newCartId := lastCartId asString.
	currentCarts add: newCartId -> (Cart acceptingItemsOf: catalog).
	clientByCartId add: newCartId -> aClientId.
	cartsExpirationTimes add: newCartId -> (fakeClock now).
	^newCartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:48:33'!
newCartId
	lastCartId := lastCartId + 1.
	^lastCartId asString.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:48:52' prior: 50662702!
createCartFor: aClientId withPass: aPasswordString
	| newCartId |	
	
	self assertClientIdAndPasswordAreValid: aClientId with: aPasswordString.
	newCartId := self newCartId.
	currentCarts add: newCartId -> (Cart acceptingItemsOf: catalog).
	clientByCartId add: newCartId -> aClientId.
	cartsExpirationTimes add: newCartId -> (fakeClock now).
	^newCartId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 11:48:54'!
PASSED!

!classDefinition: #Interface category: 'TusLibros' stamp: 'VB 11/9/2023 11:52:52'!
Object subclass: #Interface
	instanceVariableNames: 'clients currentCarts catalog lastCartId clientsPurchases cartsCreationTimes clientByCartId fakeClock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:52:52' prior: 50660995!
initializeWith: aClientDictionary andCatalog: aCatalog andClock: aDateAndTimeClass
	clients := aClientDictionary.
	catalog := aCatalog.
	lastCartId := 0.
	clientsPurchases := (aClientDictionary keys) 
					inject: (Dictionary new) 
					into: [:purchasesDict :aKey | purchasesDict add: aKey -> (OrderedCollection new). purchasesDict].
	currentCarts := Dictionary new.
	clientByCartId := Dictionary new.
	cartsCreationTimes := Dictionary new.
	fakeClock := aDateAndTimeClass.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:52:52' prior: 50661040!
isCartExpired: cartId
	^(fakeClock now - (cartsCreationTimes at: cartId)) >= (30 minutes).! !
!Interface methodsFor: 'as yet unclassified' stamp: 'VB 11/9/2023 11:52:52' prior: 50662722!
createCartFor: aClientId withPass: aPasswordString
	| newCartId |	
	
	self assertClientIdAndPasswordAreValid: aClientId with: aPasswordString.
	newCartId := self newCartId.
	currentCarts add: newCartId -> (Cart acceptingItemsOf: catalog).
	clientByCartId add: newCartId -> aClientId.
	cartsCreationTimes add: newCartId -> (fakeClock now).
	^newCartId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:55:58'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 11:55:59'!
PASSED!

----SNAPSHOT----(9 November 2023 11:56:12) CuisUniversity-5981.image priorSource: 10537017!

----SNAPSHOT----(9 November 2023 11:56:15) CuisUniversity-5981.image priorSource: 10604768!
!Interface methodsFor: 'restInterface' stamp: 'VB 11/9/2023 12:00:15'!
listCartAsString: aCart
	^(catalog keys) inject: '' into: [:stringList :anIsbn | ((aCart occurrencesOf: anIsbn) = 0) 
								ifFalse: [stringList, anIsbn , '|', (aCart occurrencesOf: anIsbn) asString, '|']
								ifTrue: [stringList]. 
		 					].! !
!Interface methodsFor: 'restInterface' stamp: 'VB 11/9/2023 12:00:35' prior: 50662519!
listCart: aCartId
	| cart |
	cart := self assertCartIdIsValidAndReturnCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	^self listCartAsString: cart.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 12:00:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 12:00:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 12:00:39'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 12:00:39'!
PASSED!
!Interface methodsFor: 'restInterface' stamp: 'VB 11/9/2023 12:01:17' prior: 50660634!
listPurchasesOfClient: aClientId withPass: aPasswordString
	| purchases purchasesString totalAmount |	
	self assertClientIdAndPasswordAreValid: aClientId with: aPasswordString.
	purchases := clientsPurchases at: aClientId.
	purchasesString := ''.
	totalAmount := 0.
	(catalog keys) do: [:item | | itemQuantity |
						itemQuantity := (purchases occurrencesOf: item).
						(itemQuantity = 0)
						ifFalse: [ purchasesString := purchasesString, item, '|', itemQuantity asString, '|'.
								totalAmount := totalAmount + (itemQuantity*(catalog at:item)). ].
					].
	^purchasesString, totalAmount asString.
	! !
!Interface methodsFor: 'restInterface' stamp: 'VB 11/9/2023 12:05:13'!
listPurchasesAsString: purchasesCollection
	| purchasesString totalAmount |
	purchasesString := ''.
	totalAmount := 0.
	(catalog keys) do: [:item | | itemQuantity |
						itemQuantity := (purchasesCollection occurrencesOf: item).
						(itemQuantity = 0)
						ifFalse: [ purchasesString := purchasesString, item, '|', itemQuantity asString, '|'.
								totalAmount := totalAmount + (itemQuantity*(catalog at:item)). ].
					].
	^purchasesString, totalAmount asString.
	! !
!Interface methodsFor: 'restInterface' stamp: 'VB 11/9/2023 12:05:41' prior: 50663208!
listPurchasesOfClient: aClientId withPass: aPasswordString
	| purchases |	
	self assertClientIdAndPasswordAreValid: aClientId with: aPasswordString.
	purchases := clientsPurchases at: aClientId.
	^self listPurchasesAsString: purchases.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 12:06:01'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 12:08:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CashierTest #test01CheckOutIsNotPossibleIfEmptyCart stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CashierTest #test02CheckOutIsPossibleWithCartWithOneBook stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CashierTest #test03CalculateProperDebitForCart stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CashierTest #test04CheckOutIsNotPossibleWithExpiredCreditCard stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CreditCardTest #test01ExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithLessThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberWithMoreThan16CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardNumberWithCharactersThatIsNotADigitShouldNotBeValid stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardOwnerNameWithMoreThan30CharactersShouldNotBeValid stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #CreditCardTest #test06NotExpiredCreditCardAnswersCorrectly stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test01CanNotDebitANonPositiveAmount stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test02CanNotDebitFromAStolenCard stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test03CanNotDebitFromACardWithoutCredit stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #FakeMerchantProcessorTest #test04ValidCreditCardCanBuy stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test01CreateCartWithNonRegisteredClientIdShouldFail stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithRegisteredClientIdAndWrongPasswordShouldFail stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test03CreateCartWithRegisteredClientIdAndCorrectPasswordCreatesEmptyCart stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test04AddToCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test05ListCartWithInvalidCartIdShouldFail stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test06ListCartWithValidCartIdListsCartISBN stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test07ListCartWithValidCartIdListsCartISBNSeveralBooks stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test08AddToCartWithValidCartIdShouldntFail stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test09CheckoutFailsWithUnknownCartId stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test10CheckoutWithValidCartIdAndCreditCard stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test11ExpiredCartCantAddBook stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test12ExpiredCartCantCheckOut stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test13ExpiredCartCantListCart stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test14ExpiredCartAfterTimeTravellingCanAddBook stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test15ListPurchasesWithValidClientIdAndPassword stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

!testRun: #InterfaceTest #test16ListPurchasesWithValidClientIdAndPasswordMultipleBooks stamp: 'VB 11/9/2023 12:08:48'!
PASSED!

----SNAPSHOT----(9 November 2023 12:09:01) CuisUniversity-5981.image priorSource: 10604861!

----SNAPSHOT----(9 November 2023 12:09:04) CuisUniversity-5981.image priorSource: 10624202!